// Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        (unknown)
// source: grpc_service_v2.proto

package nvidia_inferenceserver

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//@@
//@@.. cpp:var:: message ServerLiveRequest
//@@
//@@   Request message for ServerLive.
//@@
type ServerLiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerLiveRequest) Reset() {
	*x = ServerLiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerLiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLiveRequest) ProtoMessage() {}

func (x *ServerLiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLiveRequest.ProtoReflect.Descriptor instead.
func (*ServerLiveRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{0}
}

//@@
//@@.. cpp:var:: message ServerLiveResponse
//@@
//@@   Response message for ServerLive.
//@@
type ServerLiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: bool live
	//@@
	//@@     True if the inference server is live, false it not live.
	//@@
	Live bool `protobuf:"varint,1,opt,name=live,proto3" json:"live,omitempty"`
}

func (x *ServerLiveResponse) Reset() {
	*x = ServerLiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerLiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLiveResponse) ProtoMessage() {}

func (x *ServerLiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLiveResponse.ProtoReflect.Descriptor instead.
func (*ServerLiveResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{1}
}

func (x *ServerLiveResponse) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

//@@
//@@.. cpp:var:: message ServerReadyRequest
//@@
//@@   Request message for ServerReady.
//@@
type ServerReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerReadyRequest) Reset() {
	*x = ServerReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerReadyRequest) ProtoMessage() {}

func (x *ServerReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerReadyRequest.ProtoReflect.Descriptor instead.
func (*ServerReadyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{2}
}

//@@
//@@.. cpp:var:: message ServerReadyResponse
//@@
//@@   Response message for ServerReady.
//@@
type ServerReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: bool ready
	//@@
	//@@     True if the inference server is ready, false it not ready.
	//@@
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ServerReadyResponse) Reset() {
	*x = ServerReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerReadyResponse) ProtoMessage() {}

func (x *ServerReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerReadyResponse.ProtoReflect.Descriptor instead.
func (*ServerReadyResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{3}
}

func (x *ServerReadyResponse) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

//@@
//@@.. cpp:var:: message ModelReadyRequest
//@@
//@@   Request message for ModelReady.
//@@
type ModelReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the model to check for readiness.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@  .. cpp:var:: string version
	//@@
	//@@     The version of the model to check for readiness. If not given the
	//@@     server will choose a version based on the model and internal policy.
	//@@
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ModelReadyRequest) Reset() {
	*x = ModelReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelReadyRequest) ProtoMessage() {}

func (x *ModelReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelReadyRequest.ProtoReflect.Descriptor instead.
func (*ModelReadyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{4}
}

func (x *ModelReadyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelReadyRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

//@@
//@@.. cpp:var:: message ModelReadyResponse
//@@
//@@   Response message for ModelReady.
//@@
type ModelReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: bool ready
	//@@
	//@@     True if the model is ready, false it not ready.
	//@@
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ModelReadyResponse) Reset() {
	*x = ModelReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelReadyResponse) ProtoMessage() {}

func (x *ModelReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelReadyResponse.ProtoReflect.Descriptor instead.
func (*ModelReadyResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{5}
}

func (x *ModelReadyResponse) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

//@@
//@@.. cpp:var:: message ServerMetadataRequest
//@@
//@@   Request message for ServerMetadata.
//@@
type ServerMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerMetadataRequest) Reset() {
	*x = ServerMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMetadataRequest) ProtoMessage() {}

func (x *ServerMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMetadataRequest.ProtoReflect.Descriptor instead.
func (*ServerMetadataRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{6}
}

//@@
//@@.. cpp:var:: message ServerMetadataResponse
//@@
//@@   Response message for ServerMetadata.
//@@
type ServerMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The server name.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@
	//@@  .. cpp:var:: string version
	//@@
	//@@     The server version.
	//@@
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	//@@
	//@@  .. cpp:var:: string extensions (repeated)
	//@@
	//@@     The extensions supported by the server.
	//@@
	Extensions []string `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *ServerMetadataResponse) Reset() {
	*x = ServerMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMetadataResponse) ProtoMessage() {}

func (x *ServerMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMetadataResponse.ProtoReflect.Descriptor instead.
func (*ServerMetadataResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{7}
}

func (x *ServerMetadataResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServerMetadataResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerMetadataResponse) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelMetadataRequest
//@@
//@@   Request message for ModelMetadata.
//@@
type ModelMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the model.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@  .. cpp:var:: string version
	//@@
	//@@     The version of the model to check for readiness. If not
	//@@     given the server will choose a version based on the
	//@@     model and internal policy.
	//@@
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ModelMetadataRequest) Reset() {
	*x = ModelMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelMetadataRequest) ProtoMessage() {}

func (x *ModelMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelMetadataRequest.ProtoReflect.Descriptor instead.
func (*ModelMetadataRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{8}
}

func (x *ModelMetadataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelMetadataRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

//@@
//@@.. cpp:var:: message ModelMetadataResponse
//@@
//@@   Response message for ModelMetadata.
//@@
type ModelMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The model name.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@
	//@@  .. cpp:var:: string versions (repeated)
	//@@
	//@@     The versions of the model.
	//@@
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	//@@
	//@@  .. cpp:var:: string platform
	//@@
	//@@     The model's platform.
	//@@
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	//@@
	//@@  .. cpp:var:: TensorMetadata inputs (repeated)
	//@@
	//@@     The model's inputs.
	//@@
	Inputs []*ModelMetadataResponse_TensorMetadata `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	//@@
	//@@  .. cpp:var:: TensorMetadata outputs (repeated)
	//@@
	//@@     The model's outputs.
	//@@
	Outputs []*ModelMetadataResponse_TensorMetadata `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ModelMetadataResponse) Reset() {
	*x = ModelMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelMetadataResponse) ProtoMessage() {}

func (x *ModelMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelMetadataResponse.ProtoReflect.Descriptor instead.
func (*ModelMetadataResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{9}
}

func (x *ModelMetadataResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelMetadataResponse) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ModelMetadataResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ModelMetadataResponse) GetInputs() []*ModelMetadataResponse_TensorMetadata {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ModelMetadataResponse) GetOutputs() []*ModelMetadataResponse_TensorMetadata {
	if x != nil {
		return x.Outputs
	}
	return nil
}

//@@
//@@.. cpp:var:: message InferParameter
//@@
//@@   An inference parameter value.
//@@
type InferParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: oneof parameter_choice
	//@@
	//@@     The parameter value can be a string, an int64 or
	//@@     a boolean
	//@@
	//
	// Types that are assignable to ParameterChoice:
	//	*InferParameter_BoolParam
	//	*InferParameter_Int64Param
	//	*InferParameter_StringParam
	ParameterChoice isInferParameter_ParameterChoice `protobuf_oneof:"parameter_choice"`
}

func (x *InferParameter) Reset() {
	*x = InferParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferParameter) ProtoMessage() {}

func (x *InferParameter) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferParameter.ProtoReflect.Descriptor instead.
func (*InferParameter) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{10}
}

func (m *InferParameter) GetParameterChoice() isInferParameter_ParameterChoice {
	if m != nil {
		return m.ParameterChoice
	}
	return nil
}

func (x *InferParameter) GetBoolParam() bool {
	if x, ok := x.GetParameterChoice().(*InferParameter_BoolParam); ok {
		return x.BoolParam
	}
	return false
}

func (x *InferParameter) GetInt64Param() int64 {
	if x, ok := x.GetParameterChoice().(*InferParameter_Int64Param); ok {
		return x.Int64Param
	}
	return 0
}

func (x *InferParameter) GetStringParam() string {
	if x, ok := x.GetParameterChoice().(*InferParameter_StringParam); ok {
		return x.StringParam
	}
	return ""
}

type isInferParameter_ParameterChoice interface {
	isInferParameter_ParameterChoice()
}

type InferParameter_BoolParam struct {
	//@@    .. cpp:var:: bool bool_param
	//@@
	//@@       A boolean parameter value.
	//@@
	BoolParam bool `protobuf:"varint,1,opt,name=bool_param,json=boolParam,proto3,oneof"`
}

type InferParameter_Int64Param struct {
	//@@    .. cpp:var:: int64 int64_param
	//@@
	//@@       An int64 parameter value.
	//@@
	Int64Param int64 `protobuf:"varint,2,opt,name=int64_param,json=int64Param,proto3,oneof"`
}

type InferParameter_StringParam struct {
	//@@    .. cpp:var:: string string_param
	//@@
	//@@       A string parameter value.
	//@@
	StringParam string `protobuf:"bytes,3,opt,name=string_param,json=stringParam,proto3,oneof"`
}

func (*InferParameter_BoolParam) isInferParameter_ParameterChoice() {}

func (*InferParameter_Int64Param) isInferParameter_ParameterChoice() {}

func (*InferParameter_StringParam) isInferParameter_ParameterChoice() {}

//@@
//@@.. cpp:var:: message InferTensorContents
//@@
//@@   The data contained in a tensor. For a given data type the
//@@   tensor contents can be represented in "raw" bytes form or in
//@@   the repeated type that matches the tensor's data type. Protobuf
//@@   oneof is not used because oneofs cannot contain repeated fields.
//@@
type InferTensorContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: bytes raw_contents
	//@@
	//@@     Raw representation of the tensor contents. The size of this
	//@@     content must match what is expected by the tensor's shape
	//@@     and data type. The raw data must be the flattened, one-dimensional,
	//@@     row-major order of the tensor elements without any stride or padding
	//@@     between the elements. Note that the FP16 data type must be
	//@@     represented as raw content as there is no standard support for a
	//@@     16-bit float type.
	//@@
	RawContents []byte `protobuf:"bytes,1,opt,name=raw_contents,json=rawContents,proto3" json:"raw_contents,omitempty"`
	//@@
	//@@  .. cpp:var:: bool bool_contents (repeated)
	//@@
	//@@     Representation for BOOL data type. The size must match what is
	//@@     expected by the tensor's shape. The contents must be the flattened,
	//@@     one-dimensional, row-major order of the tensor elements.
	//@@
	BoolContents []bool `protobuf:"varint,2,rep,packed,name=bool_contents,json=boolContents,proto3" json:"bool_contents,omitempty"`
	//@@
	//@@  .. cpp:var:: int32 int_contents (repeated)
	//@@
	//@@     Representation for INT8, INT16, and INT32 data types. The size
	//@@     must match what is expected by the tensor's shape. The contents
	//@@     must be the flattened, one-dimensional, row-major order of the
	//@@     tensor elements.
	//@@
	IntContents []int32 `protobuf:"varint,3,rep,packed,name=int_contents,json=intContents,proto3" json:"int_contents,omitempty"`
	//@@
	//@@  .. cpp:var:: int64 int64_contents (repeated)
	//@@
	//@@     Representation for INT64 data types. The size must match what
	//@@     is expected by the tensor's shape. The contents must be the
	//@@     flattened, one-dimensional, row-major order of the tensor elements.
	//@@
	Int64Contents []int64 `protobuf:"varint,4,rep,packed,name=int64_contents,json=int64Contents,proto3" json:"int64_contents,omitempty"`
	//@@
	//@@  .. cpp:var:: uint32 uint_contents (repeated)
	//@@
	//@@     Representation for UINT8, UINT16, and UINT32 data types. The size
	//@@     must match what is expected by the tensor's shape. The contents
	//@@     must be the flattened, one-dimensional, row-major order of the
	//@@     tensor elements.
	//@@
	UintContents []uint32 `protobuf:"varint,5,rep,packed,name=uint_contents,json=uintContents,proto3" json:"uint_contents,omitempty"`
	//@@
	//@@  .. cpp:var:: uint64 uint64_contents (repeated)
	//@@
	//@@     Representation for UINT64 data types. The size must match what
	//@@     is expected by the tensor's shape. The contents must be the
	//@@     flattened, one-dimensional, row-major order of the tensor elements.
	//@@
	Uint64Contents []uint64 `protobuf:"varint,6,rep,packed,name=uint64_contents,json=uint64Contents,proto3" json:"uint64_contents,omitempty"`
	//@@
	//@@  .. cpp:var:: float fp32_contents (repeated)
	//@@
	//@@     Representation for FP32 data type. The size must match what is
	//@@     expected by the tensor's shape. The contents must be the flattened,
	//@@     one-dimensional, row-major order of the tensor elements.
	//@@
	Fp32Contents []float32 `protobuf:"fixed32,7,rep,packed,name=fp32_contents,json=fp32Contents,proto3" json:"fp32_contents,omitempty"`
	//@@
	//@@  .. cpp:var:: double fp64_contents (repeated)
	//@@
	//@@     Representation for FP64 data type. The size must match what is
	//@@     expected by the tensor's shape. The contents must be the flattened,
	//@@     one-dimensional, row-major order of the tensor elements.
	//@@
	Fp64Contents []float64 `protobuf:"fixed64,8,rep,packed,name=fp64_contents,json=fp64Contents,proto3" json:"fp64_contents,omitempty"`
	//@@
	//@@  .. cpp:var:: bytes byte_contents (repeated)
	//@@
	//@@     Representation for BYTES data type. The size must match what is
	//@@     expected by the tensor's shape. The contents must be the flattened,
	//@@     one-dimensional, row-major order of the tensor elements.
	//@@
	ByteContents [][]byte `protobuf:"bytes,9,rep,name=byte_contents,json=byteContents,proto3" json:"byte_contents,omitempty"`
}

func (x *InferTensorContents) Reset() {
	*x = InferTensorContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferTensorContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferTensorContents) ProtoMessage() {}

func (x *InferTensorContents) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferTensorContents.ProtoReflect.Descriptor instead.
func (*InferTensorContents) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{11}
}

func (x *InferTensorContents) GetRawContents() []byte {
	if x != nil {
		return x.RawContents
	}
	return nil
}

func (x *InferTensorContents) GetBoolContents() []bool {
	if x != nil {
		return x.BoolContents
	}
	return nil
}

func (x *InferTensorContents) GetIntContents() []int32 {
	if x != nil {
		return x.IntContents
	}
	return nil
}

func (x *InferTensorContents) GetInt64Contents() []int64 {
	if x != nil {
		return x.Int64Contents
	}
	return nil
}

func (x *InferTensorContents) GetUintContents() []uint32 {
	if x != nil {
		return x.UintContents
	}
	return nil
}

func (x *InferTensorContents) GetUint64Contents() []uint64 {
	if x != nil {
		return x.Uint64Contents
	}
	return nil
}

func (x *InferTensorContents) GetFp32Contents() []float32 {
	if x != nil {
		return x.Fp32Contents
	}
	return nil
}

func (x *InferTensorContents) GetFp64Contents() []float64 {
	if x != nil {
		return x.Fp64Contents
	}
	return nil
}

func (x *InferTensorContents) GetByteContents() [][]byte {
	if x != nil {
		return x.ByteContents
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelInferRequest
//@@
//@@   Request message for ModelInfer.
//@@
type ModelInferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string model_name
	//@@
	//@@     The name of the model to use for inferencing.
	//@@
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	//@@  .. cpp:var:: string model_version
	//@@
	//@@     The version of the model to use for inference. If not
	//@@     given the latest/most-recent version of the model is used.
	//@@
	ModelVersion string `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	//@@  .. cpp:var:: string id
	//@@
	//@@     Optional identifier for the request. If specified will be
	//@@     returned in the response.
	//@@
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	//@@  .. cpp:var:: map<string,InferParameter> parameters
	//@@
	//@@     Optional inference parameters.
	//@@
	Parameters map[string]*InferParameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@@
	//@@  .. cpp:var:: InferInputTensor inputs (repeated)
	//@@
	//@@     The input tensors for the inference.
	//@@
	Inputs []*ModelInferRequest_InferInputTensor `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	//@@
	//@@  .. cpp:var:: InferRequestedOutputTensor outputs (repeated)
	//@@
	//@@     The requested output tensors for the inference. Optional, if not
	//@@     specified all outputs specified in the model config will be
	//@@     returned.
	//@@
	Outputs []*ModelInferRequest_InferRequestedOutputTensor `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ModelInferRequest) Reset() {
	*x = ModelInferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInferRequest) ProtoMessage() {}

func (x *ModelInferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInferRequest.ProtoReflect.Descriptor instead.
func (*ModelInferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{12}
}

func (x *ModelInferRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelInferRequest) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *ModelInferRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelInferRequest) GetParameters() map[string]*InferParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ModelInferRequest) GetInputs() []*ModelInferRequest_InferInputTensor {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ModelInferRequest) GetOutputs() []*ModelInferRequest_InferRequestedOutputTensor {
	if x != nil {
		return x.Outputs
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelInferResponse
//@@
//@@   Response message for ModelInfer.
//@@
type ModelInferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string model_name
	//@@
	//@@     The name of the model used for inference.
	//@@
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	//@@  .. cpp:var:: string model_version
	//@@
	//@@     The version of the model used for inference.
	//@@
	ModelVersion string `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	//@@  .. cpp:var:: string id
	//@@
	//@@     The id of the inference request if one was specified.
	//@@
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	//@@  .. cpp:var:: map<string,InferParameter> parameters
	//@@
	//@@     Optional inference response parameters.
	//@@
	Parameters map[string]*InferParameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@@
	//@@  .. cpp:var:: InferOutputTensor outputs (repeated)
	//@@
	//@@     The output tensors holding inference results.
	//@@
	Outputs []*ModelInferResponse_InferOutputTensor `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ModelInferResponse) Reset() {
	*x = ModelInferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInferResponse) ProtoMessage() {}

func (x *ModelInferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInferResponse.ProtoReflect.Descriptor instead.
func (*ModelInferResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{13}
}

func (x *ModelInferResponse) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelInferResponse) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *ModelInferResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelInferResponse) GetParameters() map[string]*InferParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ModelInferResponse) GetOutputs() []*ModelInferResponse_InferOutputTensor {
	if x != nil {
		return x.Outputs
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelStreamInferResponse
//@@
//@@   Response message for ModelStreamInfer.
//@@
type ModelStreamInferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string error_message
	//@@
	//@@     The message describing the error. The empty message
	//@@     indicates the inference was successful without errors.
	//@@
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	//@@
	//@@  .. cpp:var:: ModelInferResponse infer_response
	//@@
	//@@     Holds the results of the request.
	//@@
	InferResponse *ModelInferResponse `protobuf:"bytes,2,opt,name=infer_response,json=inferResponse,proto3" json:"infer_response,omitempty"`
}

func (x *ModelStreamInferResponse) Reset() {
	*x = ModelStreamInferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelStreamInferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelStreamInferResponse) ProtoMessage() {}

func (x *ModelStreamInferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelStreamInferResponse.ProtoReflect.Descriptor instead.
func (*ModelStreamInferResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{14}
}

func (x *ModelStreamInferResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ModelStreamInferResponse) GetInferResponse() *ModelInferResponse {
	if x != nil {
		return x.InferResponse
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelConfigRequest
//@@
//@@   Request message for ModelConfig.
//@@
type ModelConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the model.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@  .. cpp:var:: string version
	//@@
	//@@     The version of the model. If not given the model version
	//@@     is selected automatically based on the version policy.
	//@@
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ModelConfigRequest) Reset() {
	*x = ModelConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelConfigRequest) ProtoMessage() {}

func (x *ModelConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelConfigRequest.ProtoReflect.Descriptor instead.
func (*ModelConfigRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{15}
}

func (x *ModelConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelConfigRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

//@@
//@@.. cpp:var:: message ModelConfigResponse
//@@
//@@   Response message for ModelConfig.
//@@
type ModelConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: ModelConfig config
	//@@
	//@@     The model configuration.
	//@@
	Config *ModelConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ModelConfigResponse) Reset() {
	*x = ModelConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelConfigResponse) ProtoMessage() {}

func (x *ModelConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelConfigResponse.ProtoReflect.Descriptor instead.
func (*ModelConfigResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{16}
}

func (x *ModelConfigResponse) GetConfig() *ModelConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelStatisticsRequest
//@@
//@@   Request message for ModelStatistics.
//@@
type ModelStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the model.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@  .. cpp:var:: string version
	//@@
	//@@     The version of the model. If not given returns statistics for
	//@@     all model versions.
	//@@
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ModelStatisticsRequest) Reset() {
	*x = ModelStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelStatisticsRequest) ProtoMessage() {}

func (x *ModelStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelStatisticsRequest.ProtoReflect.Descriptor instead.
func (*ModelStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{17}
}

func (x *ModelStatisticsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelStatisticsRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

//@@
//@@.. cpp:var:: message StatisticDuration
//@@
//@@   Statistic recording a cumulative duration metric.
//@@
type StatisticDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: uint64 count
	//@@
	//@@     Cumulative number of times this metric occurred.
	//@@
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	//@@  .. cpp:var:: uint64 total_time_ns
	//@@
	//@@     Total collected duration of this metric in nanoseconds.
	//@@
	Ns uint64 `protobuf:"varint,2,opt,name=ns,proto3" json:"ns,omitempty"`
}

func (x *StatisticDuration) Reset() {
	*x = StatisticDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticDuration) ProtoMessage() {}

func (x *StatisticDuration) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticDuration.ProtoReflect.Descriptor instead.
func (*StatisticDuration) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{18}
}

func (x *StatisticDuration) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StatisticDuration) GetNs() uint64 {
	if x != nil {
		return x.Ns
	}
	return 0
}

//@@
//@@.. cpp:var:: message InferStatistics
//@@
//@@   Inference statistics.
//@@
type InferStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: StatisticDuration success
	//@@
	//@@     Cumulative count and duration for successful inference
	//@@     request.
	//@@
	Success *StatisticDuration `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	//@@  .. cpp:var:: StatisticDuration fail
	//@@
	//@@     Cumulative count and duration for failed inference
	//@@     request.
	//@@
	Fail *StatisticDuration `protobuf:"bytes,2,opt,name=fail,proto3" json:"fail,omitempty"`
	//@@  .. cpp:var:: StatisticDuration queue
	//@@
	//@@     The count and cumulative duration that inference requests wait in
	//@@     scheduling or other queues.
	//@@
	Queue *StatisticDuration `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	//@@  .. cpp:var:: StatisticDuration compute_input
	//@@
	//@@    The count and cumulative duration to prepare input tensor data as
	//@@    required by the model framework / backend. For example, this duration
	//@@    should include the time to copy input tensor data to the GPU.
	//@@
	ComputeInput *StatisticDuration `protobuf:"bytes,4,opt,name=compute_input,json=computeInput,proto3" json:"compute_input,omitempty"`
	//@@  .. cpp:var:: StatisticDuration compute_infer
	//@@
	//@@     The count and cumulative duration to execute the model.
	//@@
	ComputeInfer *StatisticDuration `protobuf:"bytes,5,opt,name=compute_infer,json=computeInfer,proto3" json:"compute_infer,omitempty"`
	//@@  .. cpp:var:: StatisticDuration compute_output
	//@@
	//@@     The count and cumulative duration to extract output tensor data
	//@@     produced by the model framework / backend. For example, this duration
	//@@     should include the time to copy output tensor data from the GPU.
	//@@
	ComputeOutput *StatisticDuration `protobuf:"bytes,6,opt,name=compute_output,json=computeOutput,proto3" json:"compute_output,omitempty"`
}

func (x *InferStatistics) Reset() {
	*x = InferStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferStatistics) ProtoMessage() {}

func (x *InferStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferStatistics.ProtoReflect.Descriptor instead.
func (*InferStatistics) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{19}
}

func (x *InferStatistics) GetSuccess() *StatisticDuration {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *InferStatistics) GetFail() *StatisticDuration {
	if x != nil {
		return x.Fail
	}
	return nil
}

func (x *InferStatistics) GetQueue() *StatisticDuration {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *InferStatistics) GetComputeInput() *StatisticDuration {
	if x != nil {
		return x.ComputeInput
	}
	return nil
}

func (x *InferStatistics) GetComputeInfer() *StatisticDuration {
	if x != nil {
		return x.ComputeInfer
	}
	return nil
}

func (x *InferStatistics) GetComputeOutput() *StatisticDuration {
	if x != nil {
		return x.ComputeOutput
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelStatisticsResponse
//@@
//@@   Response message for ModelStatistics.
//@@
type ModelStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: map<string, InferStatistics> inference
	//@@
	//@@     Map from version to inference statistics for that version.
	//@@
	Inference map[string]*InferStatistics `protobuf:"bytes,1,rep,name=inference,proto3" json:"inference,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModelStatisticsResponse) Reset() {
	*x = ModelStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelStatisticsResponse) ProtoMessage() {}

func (x *ModelStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelStatisticsResponse.ProtoReflect.Descriptor instead.
func (*ModelStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{20}
}

func (x *ModelStatisticsResponse) GetInference() map[string]*InferStatistics {
	if x != nil {
		return x.Inference
	}
	return nil
}

//@@
//@@.. cpp:var:: message RepositoryIndexRequest
//@@
//@@   Request message for RepositoryIndex.
//@@
type RepositoryIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string repository_name
	//@@
	//@@     The name of the repository. If empty the index is returned
	//@@     for all repositories.
	//@@
	RepositoryName string `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
}

func (x *RepositoryIndexRequest) Reset() {
	*x = RepositoryIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryIndexRequest) ProtoMessage() {}

func (x *RepositoryIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryIndexRequest.ProtoReflect.Descriptor instead.
func (*RepositoryIndexRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{21}
}

func (x *RepositoryIndexRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

//@@
//@@.. cpp:var:: message RepositoryIndexResponse
//@@
//@@   Response message for RepositoryIndex.
//@@
type RepositoryIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: ModelIndex models (repeated)
	//@@
	//@@     An index entry for each model.
	//@@
	Models []*RepositoryIndexResponse_ModelIndex `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *RepositoryIndexResponse) Reset() {
	*x = RepositoryIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryIndexResponse) ProtoMessage() {}

func (x *RepositoryIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryIndexResponse.ProtoReflect.Descriptor instead.
func (*RepositoryIndexResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{22}
}

func (x *RepositoryIndexResponse) GetModels() []*RepositoryIndexResponse_ModelIndex {
	if x != nil {
		return x.Models
	}
	return nil
}

//@@
//@@.. cpp:var:: message RepositoryModelLoadRequest
//@@
//@@   Request message for RepositoryModelLoad.
//@@
type RepositoryModelLoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string repository_name
	//@@
	//@@     The name of the repository to load from. If empty the model
	//@@     is loaded from any repository.
	//@@
	RepositoryName string `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	//@@  .. cpp:var:: string repository_name
	//@@
	//@@     The name of the model to load, or reload.
	//@@
	ModelName string `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *RepositoryModelLoadRequest) Reset() {
	*x = RepositoryModelLoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryModelLoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryModelLoadRequest) ProtoMessage() {}

func (x *RepositoryModelLoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryModelLoadRequest.ProtoReflect.Descriptor instead.
func (*RepositoryModelLoadRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{23}
}

func (x *RepositoryModelLoadRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *RepositoryModelLoadRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

//@@
//@@.. cpp:var:: message RepositoryModelLoadResponse
//@@
//@@   Response message for RepositoryModelLoad.
//@@
type RepositoryModelLoadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryModelLoadResponse) Reset() {
	*x = RepositoryModelLoadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryModelLoadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryModelLoadResponse) ProtoMessage() {}

func (x *RepositoryModelLoadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryModelLoadResponse.ProtoReflect.Descriptor instead.
func (*RepositoryModelLoadResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{24}
}

//@@
//@@.. cpp:var:: message RepositoryModelUnloadRequest
//@@
//@@   Request message for RepositoryModelUnload.
//@@
type RepositoryModelUnloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string repository_name
	//@@
	//@@     The name of the repository from which the model was originally
	//@@     loaded. If empty the repository is not considered.
	//@@
	RepositoryName string `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	//@@  .. cpp:var:: string repository_name
	//@@
	//@@     The name of the model to unload.
	//@@
	ModelName string `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *RepositoryModelUnloadRequest) Reset() {
	*x = RepositoryModelUnloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryModelUnloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryModelUnloadRequest) ProtoMessage() {}

func (x *RepositoryModelUnloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryModelUnloadRequest.ProtoReflect.Descriptor instead.
func (*RepositoryModelUnloadRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{25}
}

func (x *RepositoryModelUnloadRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *RepositoryModelUnloadRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

//@@
//@@.. cpp:var:: message RepositoryModelUnloadResponse
//@@
//@@   Response message for RepositoryModelUnload.
//@@
type RepositoryModelUnloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryModelUnloadResponse) Reset() {
	*x = RepositoryModelUnloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryModelUnloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryModelUnloadResponse) ProtoMessage() {}

func (x *RepositoryModelUnloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryModelUnloadResponse.ProtoReflect.Descriptor instead.
func (*RepositoryModelUnloadResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{26}
}

//@@
//@@.. cpp:var:: message SystemSharedMemoryStatusRequest
//@@
//@@   Request message for SystemSharedMemoryStatus.
//@@
type SystemSharedMemoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the region to get status for. If empty the
	//@@     status is returned for all registered regions.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SystemSharedMemoryStatusRequest) Reset() {
	*x = SystemSharedMemoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSharedMemoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSharedMemoryStatusRequest) ProtoMessage() {}

func (x *SystemSharedMemoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSharedMemoryStatusRequest.ProtoReflect.Descriptor instead.
func (*SystemSharedMemoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{27}
}

func (x *SystemSharedMemoryStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//@@
//@@.. cpp:var:: message SystemSharedMemoryStatusResponse
//@@
//@@   Response message for SystemSharedMemoryStatus.
//@@
type SystemSharedMemoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: map<string,RegionStatus> regions
	//@@
	//@@     Status for each of the registered regions, indexed by
	//@@     region name.
	//@@
	Regions map[string]*SystemSharedMemoryStatusResponse_RegionStatus `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SystemSharedMemoryStatusResponse) Reset() {
	*x = SystemSharedMemoryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSharedMemoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSharedMemoryStatusResponse) ProtoMessage() {}

func (x *SystemSharedMemoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSharedMemoryStatusResponse.ProtoReflect.Descriptor instead.
func (*SystemSharedMemoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{28}
}

func (x *SystemSharedMemoryStatusResponse) GetRegions() map[string]*SystemSharedMemoryStatusResponse_RegionStatus {
	if x != nil {
		return x.Regions
	}
	return nil
}

//@@
//@@.. cpp:var:: message SystemSharedMemoryRegisterRequest
//@@
//@@   Request message for SystemSharedMemoryRegister.
//@@
type SystemSharedMemoryRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the region to register.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@  .. cpp:var:: string shared_memory_key
	//@@
	//@@     The key of the underlying memory object that contains the
	//@@     shared memory region.
	//@@
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	//@@  .. cpp:var:: uint64 offset
	//@@
	//@@     Offset, in bytes, within the underlying memory object to
	//@@     the start of the shared memory region.
	//@@
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	//@@  .. cpp:var:: uint64 byte_size
	//@@
	//@@     Size of the shared memory region, in bytes.
	//@@
	ByteSize uint64 `protobuf:"varint,4,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
}

func (x *SystemSharedMemoryRegisterRequest) Reset() {
	*x = SystemSharedMemoryRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSharedMemoryRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSharedMemoryRegisterRequest) ProtoMessage() {}

func (x *SystemSharedMemoryRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSharedMemoryRegisterRequest.ProtoReflect.Descriptor instead.
func (*SystemSharedMemoryRegisterRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{29}
}

func (x *SystemSharedMemoryRegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemSharedMemoryRegisterRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SystemSharedMemoryRegisterRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SystemSharedMemoryRegisterRequest) GetByteSize() uint64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

//@@
//@@.. cpp:var:: message SystemSharedMemoryRegisterResponse
//@@
//@@   Response message for SystemSharedMemoryRegister.
//@@
type SystemSharedMemoryRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemSharedMemoryRegisterResponse) Reset() {
	*x = SystemSharedMemoryRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSharedMemoryRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSharedMemoryRegisterResponse) ProtoMessage() {}

func (x *SystemSharedMemoryRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSharedMemoryRegisterResponse.ProtoReflect.Descriptor instead.
func (*SystemSharedMemoryRegisterResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{30}
}

//@@
//@@.. cpp:var:: message SystemSharedMemoryUnregisterRequest
//@@
//@@   Request message for SystemSharedMemoryUnregister.
//@@
type SystemSharedMemoryUnregisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the system region to unregister. If empty
	//@@     all system shared-memory regions are unregistered.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SystemSharedMemoryUnregisterRequest) Reset() {
	*x = SystemSharedMemoryUnregisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSharedMemoryUnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSharedMemoryUnregisterRequest) ProtoMessage() {}

func (x *SystemSharedMemoryUnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSharedMemoryUnregisterRequest.ProtoReflect.Descriptor instead.
func (*SystemSharedMemoryUnregisterRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{31}
}

func (x *SystemSharedMemoryUnregisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//@@
//@@.. cpp:var:: message SystemSharedMemoryUnregisterResponse
//@@
//@@   Response message for SystemSharedMemoryUnregister.
//@@
type SystemSharedMemoryUnregisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemSharedMemoryUnregisterResponse) Reset() {
	*x = SystemSharedMemoryUnregisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSharedMemoryUnregisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSharedMemoryUnregisterResponse) ProtoMessage() {}

func (x *SystemSharedMemoryUnregisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSharedMemoryUnregisterResponse.ProtoReflect.Descriptor instead.
func (*SystemSharedMemoryUnregisterResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{32}
}

//@@
//@@.. cpp:var:: message CudaSharedMemoryStatusRequest
//@@
//@@   Request message for CudaSharedMemoryStatus.
//@@
type CudaSharedMemoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the region to get status for. If empty the
	//@@     status is returned for all registered regions.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CudaSharedMemoryStatusRequest) Reset() {
	*x = CudaSharedMemoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaSharedMemoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaSharedMemoryStatusRequest) ProtoMessage() {}

func (x *CudaSharedMemoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaSharedMemoryStatusRequest.ProtoReflect.Descriptor instead.
func (*CudaSharedMemoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{33}
}

func (x *CudaSharedMemoryStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//@@
//@@.. cpp:var:: message CudaSharedMemoryStatusResponse
//@@
//@@   Response message for CudaSharedMemoryStatus.
//@@
type CudaSharedMemoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: map<string,RegionStatus> regions
	//@@
	//@@     Status for each of the registered regions, indexed by
	//@@     region name.
	//@@
	Regions map[string]*CudaSharedMemoryStatusResponse_RegionStatus `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CudaSharedMemoryStatusResponse) Reset() {
	*x = CudaSharedMemoryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaSharedMemoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaSharedMemoryStatusResponse) ProtoMessage() {}

func (x *CudaSharedMemoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaSharedMemoryStatusResponse.ProtoReflect.Descriptor instead.
func (*CudaSharedMemoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{34}
}

func (x *CudaSharedMemoryStatusResponse) GetRegions() map[string]*CudaSharedMemoryStatusResponse_RegionStatus {
	if x != nil {
		return x.Regions
	}
	return nil
}

//@@
//@@.. cpp:var:: message CudaSharedMemoryRegisterRequest
//@@
//@@   Request message for CudaSharedMemoryRegister.
//@@
type CudaSharedMemoryRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the region to register.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@  .. cpp:var:: bytes raw_handle
	//@@
	//@@     The raw serialized cudaIPC handle.
	//@@
	RawHandle []byte `protobuf:"bytes,2,opt,name=raw_handle,json=rawHandle,proto3" json:"raw_handle,omitempty"`
	//@@  .. cpp:var:: int64 device_id
	//@@
	//@@     The GPU device ID on which the cudaIPC handle was created.
	//@@
	DeviceId int64 `protobuf:"varint,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	//@@  .. cpp:var:: uint64 byte_size
	//@@
	//@@     Size of the shared memory block, in bytes.
	//@@
	ByteSize uint64 `protobuf:"varint,4,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
}

func (x *CudaSharedMemoryRegisterRequest) Reset() {
	*x = CudaSharedMemoryRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaSharedMemoryRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaSharedMemoryRegisterRequest) ProtoMessage() {}

func (x *CudaSharedMemoryRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaSharedMemoryRegisterRequest.ProtoReflect.Descriptor instead.
func (*CudaSharedMemoryRegisterRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{35}
}

func (x *CudaSharedMemoryRegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CudaSharedMemoryRegisterRequest) GetRawHandle() []byte {
	if x != nil {
		return x.RawHandle
	}
	return nil
}

func (x *CudaSharedMemoryRegisterRequest) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *CudaSharedMemoryRegisterRequest) GetByteSize() uint64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

//@@
//@@.. cpp:var:: message CudaSharedMemoryRegisterResponse
//@@
//@@   Response message for CudaSharedMemoryRegister.
//@@
type CudaSharedMemoryRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CudaSharedMemoryRegisterResponse) Reset() {
	*x = CudaSharedMemoryRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaSharedMemoryRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaSharedMemoryRegisterResponse) ProtoMessage() {}

func (x *CudaSharedMemoryRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaSharedMemoryRegisterResponse.ProtoReflect.Descriptor instead.
func (*CudaSharedMemoryRegisterResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{36}
}

//@@
//@@.. cpp:var:: message CudaSharedMemoryUnregisterRequest
//@@
//@@   Request message for CudaSharedMemoryUnregister.
//@@
type CudaSharedMemoryUnregisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name of the cuda region to unregister. If empty
	//@@     all cuda shared-memory regions are unregistered.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CudaSharedMemoryUnregisterRequest) Reset() {
	*x = CudaSharedMemoryUnregisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaSharedMemoryUnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaSharedMemoryUnregisterRequest) ProtoMessage() {}

func (x *CudaSharedMemoryUnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaSharedMemoryUnregisterRequest.ProtoReflect.Descriptor instead.
func (*CudaSharedMemoryUnregisterRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{37}
}

func (x *CudaSharedMemoryUnregisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//@@
//@@.. cpp:var:: message CudaSharedMemoryUnregisterResponse
//@@
//@@   Response message for CudaSharedMemoryUnregister.
//@@
type CudaSharedMemoryUnregisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CudaSharedMemoryUnregisterResponse) Reset() {
	*x = CudaSharedMemoryUnregisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaSharedMemoryUnregisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaSharedMemoryUnregisterResponse) ProtoMessage() {}

func (x *CudaSharedMemoryUnregisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaSharedMemoryUnregisterResponse.ProtoReflect.Descriptor instead.
func (*CudaSharedMemoryUnregisterResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{38}
}

//@@
//@@  .. cpp:var:: message TensorMetadata
//@@
//@@     Metadata for a tensor.
//@@
type ModelMetadataResponse_TensorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@    .. cpp:var:: string name
	//@@
	//@@       The tensor name.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@
	//@@    .. cpp:var:: string datatype
	//@@
	//@@       The tensor data type.
	//@@
	Datatype string `protobuf:"bytes,2,opt,name=datatype,proto3" json:"datatype,omitempty"`
	//@@
	//@@    .. cpp:var:: int64 shape (repeated)
	//@@
	//@@       The tensor shape. A variable-size dimension is represented
	//@@       by a -1 value.
	//@@
	Shape []int64 `protobuf:"varint,3,rep,packed,name=shape,proto3" json:"shape,omitempty"`
}

func (x *ModelMetadataResponse_TensorMetadata) Reset() {
	*x = ModelMetadataResponse_TensorMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelMetadataResponse_TensorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelMetadataResponse_TensorMetadata) ProtoMessage() {}

func (x *ModelMetadataResponse_TensorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelMetadataResponse_TensorMetadata.ProtoReflect.Descriptor instead.
func (*ModelMetadataResponse_TensorMetadata) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ModelMetadataResponse_TensorMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelMetadataResponse_TensorMetadata) GetDatatype() string {
	if x != nil {
		return x.Datatype
	}
	return ""
}

func (x *ModelMetadataResponse_TensorMetadata) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

//@@
//@@  .. cpp:var:: message InferInputTensor
//@@
//@@     An input tensor for an inference request.
//@@
type ModelInferRequest_InferInputTensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@    .. cpp:var:: string name
	//@@
	//@@       The tensor name.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@
	//@@    .. cpp:var:: string datatype
	//@@
	//@@       The tensor data type.
	//@@
	Datatype string `protobuf:"bytes,2,opt,name=datatype,proto3" json:"datatype,omitempty"`
	//@@
	//@@    .. cpp:var:: int64 shape (repeated)
	//@@
	//@@       The tensor shape.
	//@@
	Shape []int64 `protobuf:"varint,3,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	//@@    .. cpp:var:: map<string,InferParameter> parameters
	//@@
	//@@       Optional inference input tensor parameters.
	//@@
	Parameters map[string]*InferParameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@@    .. cpp:var:: InferTensorContents
	//@@
	//@@       The input tensor data.
	//@@
	Contents *InferTensorContents `protobuf:"bytes,5,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ModelInferRequest_InferInputTensor) Reset() {
	*x = ModelInferRequest_InferInputTensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInferRequest_InferInputTensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInferRequest_InferInputTensor) ProtoMessage() {}

func (x *ModelInferRequest_InferInputTensor) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInferRequest_InferInputTensor.ProtoReflect.Descriptor instead.
func (*ModelInferRequest_InferInputTensor) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ModelInferRequest_InferInputTensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInferRequest_InferInputTensor) GetDatatype() string {
	if x != nil {
		return x.Datatype
	}
	return ""
}

func (x *ModelInferRequest_InferInputTensor) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ModelInferRequest_InferInputTensor) GetParameters() map[string]*InferParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ModelInferRequest_InferInputTensor) GetContents() *InferTensorContents {
	if x != nil {
		return x.Contents
	}
	return nil
}

//@@
//@@  .. cpp:var:: message InferRequestedOutputTensor
//@@
//@@     An output tensor requested for an inference request.
//@@
type ModelInferRequest_InferRequestedOutputTensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@    .. cpp:var:: string name
	//@@
	//@@       The tensor name.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@    .. cpp:var:: map<string,InferParameter> parameters
	//@@
	//@@       Optional requested output tensor parameters.
	//@@
	Parameters map[string]*InferParameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModelInferRequest_InferRequestedOutputTensor) Reset() {
	*x = ModelInferRequest_InferRequestedOutputTensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInferRequest_InferRequestedOutputTensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInferRequest_InferRequestedOutputTensor) ProtoMessage() {}

func (x *ModelInferRequest_InferRequestedOutputTensor) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInferRequest_InferRequestedOutputTensor.ProtoReflect.Descriptor instead.
func (*ModelInferRequest_InferRequestedOutputTensor) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ModelInferRequest_InferRequestedOutputTensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInferRequest_InferRequestedOutputTensor) GetParameters() map[string]*InferParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

//@@
//@@  .. cpp:var:: message InferOutputTensor
//@@
//@@     An output tensor returned for an inference request.
//@@
type ModelInferResponse_InferOutputTensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@    .. cpp:var:: string name
	//@@
	//@@       The tensor name.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@
	//@@    .. cpp:var:: string datatype
	//@@
	//@@       The tensor data type.
	//@@
	Datatype string `protobuf:"bytes,2,opt,name=datatype,proto3" json:"datatype,omitempty"`
	//@@
	//@@    .. cpp:var:: int64 shape (repeated)
	//@@
	//@@       The tensor shape.
	//@@
	Shape []int64 `protobuf:"varint,3,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	//@@    .. cpp:var:: InferTensorContents
	//@@
	//@@       The output tensor data.
	//@@
	Contents *InferTensorContents `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ModelInferResponse_InferOutputTensor) Reset() {
	*x = ModelInferResponse_InferOutputTensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInferResponse_InferOutputTensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInferResponse_InferOutputTensor) ProtoMessage() {}

func (x *ModelInferResponse_InferOutputTensor) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInferResponse_InferOutputTensor.ProtoReflect.Descriptor instead.
func (*ModelInferResponse_InferOutputTensor) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ModelInferResponse_InferOutputTensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInferResponse_InferOutputTensor) GetDatatype() string {
	if x != nil {
		return x.Datatype
	}
	return ""
}

func (x *ModelInferResponse_InferOutputTensor) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ModelInferResponse_InferOutputTensor) GetContents() *InferTensorContents {
	if x != nil {
		return x.Contents
	}
	return nil
}

//@@
//@@  .. cpp:var:: message ModelIndex
//@@
//@@     Index entry for a model.
//@@
type RepositoryIndexResponse_ModelIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@    .. cpp:var:: string name
	//@@
	//@@       The name of the model.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RepositoryIndexResponse_ModelIndex) Reset() {
	*x = RepositoryIndexResponse_ModelIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryIndexResponse_ModelIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryIndexResponse_ModelIndex) ProtoMessage() {}

func (x *RepositoryIndexResponse_ModelIndex) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryIndexResponse_ModelIndex.ProtoReflect.Descriptor instead.
func (*RepositoryIndexResponse_ModelIndex) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{22, 0}
}

func (x *RepositoryIndexResponse_ModelIndex) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//@@
//@@  .. cpp:var:: message RegionStatus
//@@
//@@     Status for a shared memory region.
//@@
type SystemSharedMemoryStatusResponse_RegionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@    .. cpp:var:: string name
	//@@
	//@@       The name for the shared memory region.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@    .. cpp:var:: string shared_memory_key
	//@@
	//@@       The key of the underlying memory object that contains the
	//@@       shared memory region.
	//@@
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	//@@    .. cpp:var:: uint64 offset
	//@@
	//@@       Offset, in bytes, within the underlying memory object to
	//@@       the start of the shared memory region.
	//@@
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	//@@    .. cpp:var:: uint64 byte_size
	//@@
	//@@       Size of the shared memory region, in bytes.
	//@@
	ByteSize uint64 `protobuf:"varint,4,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
}

func (x *SystemSharedMemoryStatusResponse_RegionStatus) Reset() {
	*x = SystemSharedMemoryStatusResponse_RegionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSharedMemoryStatusResponse_RegionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSharedMemoryStatusResponse_RegionStatus) ProtoMessage() {}

func (x *SystemSharedMemoryStatusResponse_RegionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSharedMemoryStatusResponse_RegionStatus.ProtoReflect.Descriptor instead.
func (*SystemSharedMemoryStatusResponse_RegionStatus) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{28, 0}
}

func (x *SystemSharedMemoryStatusResponse_RegionStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemSharedMemoryStatusResponse_RegionStatus) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SystemSharedMemoryStatusResponse_RegionStatus) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SystemSharedMemoryStatusResponse_RegionStatus) GetByteSize() uint64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

//@@
//@@  .. cpp:var:: message RegionStatus
//@@
//@@     Status for a shared memory region.
//@@
type CudaSharedMemoryStatusResponse_RegionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@    .. cpp:var:: string name
	//@@
	//@@       The name for the shared memory region.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@    .. cpp:var:: uin64 device_id
	//@@
	//@@       The GPU device ID where the cudaIPC handle was created.
	//@@
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	//@@    .. cpp:var:: uint64 byte_size
	//@@
	//@@       Size of the shared memory region, in bytes.
	//@@
	ByteSize uint64 `protobuf:"varint,3,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
}

func (x *CudaSharedMemoryStatusResponse_RegionStatus) Reset() {
	*x = CudaSharedMemoryStatusResponse_RegionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_v2_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaSharedMemoryStatusResponse_RegionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaSharedMemoryStatusResponse_RegionStatus) ProtoMessage() {}

func (x *CudaSharedMemoryStatusResponse_RegionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_v2_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaSharedMemoryStatusResponse_RegionStatus.ProtoReflect.Descriptor instead.
func (*CudaSharedMemoryStatusResponse_RegionStatus) Descriptor() ([]byte, []int) {
	return file_grpc_service_v2_proto_rawDescGZIP(), []int{34, 0}
}

func (x *CudaSharedMemoryStatusResponse_RegionStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CudaSharedMemoryStatusResponse_RegionStatus) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *CudaSharedMemoryStatusResponse_RegionStatus) GetByteSize() uint64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

var File_grpc_service_v2_proto protoreflect.FileDescriptor

var file_grpc_service_v2_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69,
	0x76, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x22, 0x41, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a,
	0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x02, 0x0a, 0x15,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x54, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a,
	0x56, 0x0a, 0x0e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0e, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x70, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x70, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x70, 0x36, 0x34, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x70, 0x36,
	0x34, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe4,
	0x08, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0xf4, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x65, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8d,
	0x02, 0x0a, 0x1a, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x74, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65,
	0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x04, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x47, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x65, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x92, 0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x13, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x46, 0x0a,
	0x16, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6e, 0x73,
	0x22, 0xc8, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x66, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x17,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x65, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x16,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a,
	0x20, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x64, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1f,
	0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x0a, 0x1f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x69, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x21, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x0a, 0x23, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x24,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x43, 0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x1e, 0x43, 0x75,
	0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x07,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5c, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x7f, 0x0a, 0x0c, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x43,
	0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x61, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x43,
	0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x0a, 0x21, 0x43, 0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x75, 0x64, 0x61,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xef,
	0x11, 0x0a, 0x14, 0x47, 0x52, 0x50, 0x43, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2a, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2d, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x12, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x12, 0x29, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x68, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0f, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x74, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2e, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x32,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x34, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x37, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x1a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a,
	0x1c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x43,
	0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x43, 0x75, 0x64, 0x61, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x64,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x1a, 0x43, 0x75, 0x64,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x64, 0x61,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_service_v2_proto_rawDescOnce sync.Once
	file_grpc_service_v2_proto_rawDescData = file_grpc_service_v2_proto_rawDesc
)

func file_grpc_service_v2_proto_rawDescGZIP() []byte {
	file_grpc_service_v2_proto_rawDescOnce.Do(func() {
		file_grpc_service_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_service_v2_proto_rawDescData)
	})
	return file_grpc_service_v2_proto_rawDescData
}

var file_grpc_service_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_grpc_service_v2_proto_goTypes = []interface{}{
	(*ServerLiveRequest)(nil),                            // 0: nvidia.inferenceserver.ServerLiveRequest
	(*ServerLiveResponse)(nil),                           // 1: nvidia.inferenceserver.ServerLiveResponse
	(*ServerReadyRequest)(nil),                           // 2: nvidia.inferenceserver.ServerReadyRequest
	(*ServerReadyResponse)(nil),                          // 3: nvidia.inferenceserver.ServerReadyResponse
	(*ModelReadyRequest)(nil),                            // 4: nvidia.inferenceserver.ModelReadyRequest
	(*ModelReadyResponse)(nil),                           // 5: nvidia.inferenceserver.ModelReadyResponse
	(*ServerMetadataRequest)(nil),                        // 6: nvidia.inferenceserver.ServerMetadataRequest
	(*ServerMetadataResponse)(nil),                       // 7: nvidia.inferenceserver.ServerMetadataResponse
	(*ModelMetadataRequest)(nil),                         // 8: nvidia.inferenceserver.ModelMetadataRequest
	(*ModelMetadataResponse)(nil),                        // 9: nvidia.inferenceserver.ModelMetadataResponse
	(*InferParameter)(nil),                               // 10: nvidia.inferenceserver.InferParameter
	(*InferTensorContents)(nil),                          // 11: nvidia.inferenceserver.InferTensorContents
	(*ModelInferRequest)(nil),                            // 12: nvidia.inferenceserver.ModelInferRequest
	(*ModelInferResponse)(nil),                           // 13: nvidia.inferenceserver.ModelInferResponse
	(*ModelStreamInferResponse)(nil),                     // 14: nvidia.inferenceserver.ModelStreamInferResponse
	(*ModelConfigRequest)(nil),                           // 15: nvidia.inferenceserver.ModelConfigRequest
	(*ModelConfigResponse)(nil),                          // 16: nvidia.inferenceserver.ModelConfigResponse
	(*ModelStatisticsRequest)(nil),                       // 17: nvidia.inferenceserver.ModelStatisticsRequest
	(*StatisticDuration)(nil),                            // 18: nvidia.inferenceserver.StatisticDuration
	(*InferStatistics)(nil),                              // 19: nvidia.inferenceserver.InferStatistics
	(*ModelStatisticsResponse)(nil),                      // 20: nvidia.inferenceserver.ModelStatisticsResponse
	(*RepositoryIndexRequest)(nil),                       // 21: nvidia.inferenceserver.RepositoryIndexRequest
	(*RepositoryIndexResponse)(nil),                      // 22: nvidia.inferenceserver.RepositoryIndexResponse
	(*RepositoryModelLoadRequest)(nil),                   // 23: nvidia.inferenceserver.RepositoryModelLoadRequest
	(*RepositoryModelLoadResponse)(nil),                  // 24: nvidia.inferenceserver.RepositoryModelLoadResponse
	(*RepositoryModelUnloadRequest)(nil),                 // 25: nvidia.inferenceserver.RepositoryModelUnloadRequest
	(*RepositoryModelUnloadResponse)(nil),                // 26: nvidia.inferenceserver.RepositoryModelUnloadResponse
	(*SystemSharedMemoryStatusRequest)(nil),              // 27: nvidia.inferenceserver.SystemSharedMemoryStatusRequest
	(*SystemSharedMemoryStatusResponse)(nil),             // 28: nvidia.inferenceserver.SystemSharedMemoryStatusResponse
	(*SystemSharedMemoryRegisterRequest)(nil),            // 29: nvidia.inferenceserver.SystemSharedMemoryRegisterRequest
	(*SystemSharedMemoryRegisterResponse)(nil),           // 30: nvidia.inferenceserver.SystemSharedMemoryRegisterResponse
	(*SystemSharedMemoryUnregisterRequest)(nil),          // 31: nvidia.inferenceserver.SystemSharedMemoryUnregisterRequest
	(*SystemSharedMemoryUnregisterResponse)(nil),         // 32: nvidia.inferenceserver.SystemSharedMemoryUnregisterResponse
	(*CudaSharedMemoryStatusRequest)(nil),                // 33: nvidia.inferenceserver.CudaSharedMemoryStatusRequest
	(*CudaSharedMemoryStatusResponse)(nil),               // 34: nvidia.inferenceserver.CudaSharedMemoryStatusResponse
	(*CudaSharedMemoryRegisterRequest)(nil),              // 35: nvidia.inferenceserver.CudaSharedMemoryRegisterRequest
	(*CudaSharedMemoryRegisterResponse)(nil),             // 36: nvidia.inferenceserver.CudaSharedMemoryRegisterResponse
	(*CudaSharedMemoryUnregisterRequest)(nil),            // 37: nvidia.inferenceserver.CudaSharedMemoryUnregisterRequest
	(*CudaSharedMemoryUnregisterResponse)(nil),           // 38: nvidia.inferenceserver.CudaSharedMemoryUnregisterResponse
	(*ModelMetadataResponse_TensorMetadata)(nil),         // 39: nvidia.inferenceserver.ModelMetadataResponse.TensorMetadata
	(*ModelInferRequest_InferInputTensor)(nil),           // 40: nvidia.inferenceserver.ModelInferRequest.InferInputTensor
	(*ModelInferRequest_InferRequestedOutputTensor)(nil), // 41: nvidia.inferenceserver.ModelInferRequest.InferRequestedOutputTensor
	nil, // 42: nvidia.inferenceserver.ModelInferRequest.ParametersEntry
	nil, // 43: nvidia.inferenceserver.ModelInferRequest.InferInputTensor.ParametersEntry
	nil, // 44: nvidia.inferenceserver.ModelInferRequest.InferRequestedOutputTensor.ParametersEntry
	(*ModelInferResponse_InferOutputTensor)(nil), // 45: nvidia.inferenceserver.ModelInferResponse.InferOutputTensor
	nil, // 46: nvidia.inferenceserver.ModelInferResponse.ParametersEntry
	nil, // 47: nvidia.inferenceserver.ModelStatisticsResponse.InferenceEntry
	(*RepositoryIndexResponse_ModelIndex)(nil),            // 48: nvidia.inferenceserver.RepositoryIndexResponse.ModelIndex
	(*SystemSharedMemoryStatusResponse_RegionStatus)(nil), // 49: nvidia.inferenceserver.SystemSharedMemoryStatusResponse.RegionStatus
	nil, // 50: nvidia.inferenceserver.SystemSharedMemoryStatusResponse.RegionsEntry
	(*CudaSharedMemoryStatusResponse_RegionStatus)(nil), // 51: nvidia.inferenceserver.CudaSharedMemoryStatusResponse.RegionStatus
	nil,                 // 52: nvidia.inferenceserver.CudaSharedMemoryStatusResponse.RegionsEntry
	(*ModelConfig)(nil), // 53: nvidia.inferenceserver.ModelConfig
}
var file_grpc_service_v2_proto_depIdxs = []int32{
	39, // 0: nvidia.inferenceserver.ModelMetadataResponse.inputs:type_name -> nvidia.inferenceserver.ModelMetadataResponse.TensorMetadata
	39, // 1: nvidia.inferenceserver.ModelMetadataResponse.outputs:type_name -> nvidia.inferenceserver.ModelMetadataResponse.TensorMetadata
	42, // 2: nvidia.inferenceserver.ModelInferRequest.parameters:type_name -> nvidia.inferenceserver.ModelInferRequest.ParametersEntry
	40, // 3: nvidia.inferenceserver.ModelInferRequest.inputs:type_name -> nvidia.inferenceserver.ModelInferRequest.InferInputTensor
	41, // 4: nvidia.inferenceserver.ModelInferRequest.outputs:type_name -> nvidia.inferenceserver.ModelInferRequest.InferRequestedOutputTensor
	46, // 5: nvidia.inferenceserver.ModelInferResponse.parameters:type_name -> nvidia.inferenceserver.ModelInferResponse.ParametersEntry
	45, // 6: nvidia.inferenceserver.ModelInferResponse.outputs:type_name -> nvidia.inferenceserver.ModelInferResponse.InferOutputTensor
	13, // 7: nvidia.inferenceserver.ModelStreamInferResponse.infer_response:type_name -> nvidia.inferenceserver.ModelInferResponse
	53, // 8: nvidia.inferenceserver.ModelConfigResponse.config:type_name -> nvidia.inferenceserver.ModelConfig
	18, // 9: nvidia.inferenceserver.InferStatistics.success:type_name -> nvidia.inferenceserver.StatisticDuration
	18, // 10: nvidia.inferenceserver.InferStatistics.fail:type_name -> nvidia.inferenceserver.StatisticDuration
	18, // 11: nvidia.inferenceserver.InferStatistics.queue:type_name -> nvidia.inferenceserver.StatisticDuration
	18, // 12: nvidia.inferenceserver.InferStatistics.compute_input:type_name -> nvidia.inferenceserver.StatisticDuration
	18, // 13: nvidia.inferenceserver.InferStatistics.compute_infer:type_name -> nvidia.inferenceserver.StatisticDuration
	18, // 14: nvidia.inferenceserver.InferStatistics.compute_output:type_name -> nvidia.inferenceserver.StatisticDuration
	47, // 15: nvidia.inferenceserver.ModelStatisticsResponse.inference:type_name -> nvidia.inferenceserver.ModelStatisticsResponse.InferenceEntry
	48, // 16: nvidia.inferenceserver.RepositoryIndexResponse.models:type_name -> nvidia.inferenceserver.RepositoryIndexResponse.ModelIndex
	50, // 17: nvidia.inferenceserver.SystemSharedMemoryStatusResponse.regions:type_name -> nvidia.inferenceserver.SystemSharedMemoryStatusResponse.RegionsEntry
	52, // 18: nvidia.inferenceserver.CudaSharedMemoryStatusResponse.regions:type_name -> nvidia.inferenceserver.CudaSharedMemoryStatusResponse.RegionsEntry
	43, // 19: nvidia.inferenceserver.ModelInferRequest.InferInputTensor.parameters:type_name -> nvidia.inferenceserver.ModelInferRequest.InferInputTensor.ParametersEntry
	11, // 20: nvidia.inferenceserver.ModelInferRequest.InferInputTensor.contents:type_name -> nvidia.inferenceserver.InferTensorContents
	44, // 21: nvidia.inferenceserver.ModelInferRequest.InferRequestedOutputTensor.parameters:type_name -> nvidia.inferenceserver.ModelInferRequest.InferRequestedOutputTensor.ParametersEntry
	10, // 22: nvidia.inferenceserver.ModelInferRequest.ParametersEntry.value:type_name -> nvidia.inferenceserver.InferParameter
	10, // 23: nvidia.inferenceserver.ModelInferRequest.InferInputTensor.ParametersEntry.value:type_name -> nvidia.inferenceserver.InferParameter
	10, // 24: nvidia.inferenceserver.ModelInferRequest.InferRequestedOutputTensor.ParametersEntry.value:type_name -> nvidia.inferenceserver.InferParameter
	11, // 25: nvidia.inferenceserver.ModelInferResponse.InferOutputTensor.contents:type_name -> nvidia.inferenceserver.InferTensorContents
	10, // 26: nvidia.inferenceserver.ModelInferResponse.ParametersEntry.value:type_name -> nvidia.inferenceserver.InferParameter
	19, // 27: nvidia.inferenceserver.ModelStatisticsResponse.InferenceEntry.value:type_name -> nvidia.inferenceserver.InferStatistics
	49, // 28: nvidia.inferenceserver.SystemSharedMemoryStatusResponse.RegionsEntry.value:type_name -> nvidia.inferenceserver.SystemSharedMemoryStatusResponse.RegionStatus
	51, // 29: nvidia.inferenceserver.CudaSharedMemoryStatusResponse.RegionsEntry.value:type_name -> nvidia.inferenceserver.CudaSharedMemoryStatusResponse.RegionStatus
	0,  // 30: nvidia.inferenceserver.GRPCInferenceService.ServerLive:input_type -> nvidia.inferenceserver.ServerLiveRequest
	2,  // 31: nvidia.inferenceserver.GRPCInferenceService.ServerReady:input_type -> nvidia.inferenceserver.ServerReadyRequest
	4,  // 32: nvidia.inferenceserver.GRPCInferenceService.ModelReady:input_type -> nvidia.inferenceserver.ModelReadyRequest
	6,  // 33: nvidia.inferenceserver.GRPCInferenceService.ServerMetadata:input_type -> nvidia.inferenceserver.ServerMetadataRequest
	8,  // 34: nvidia.inferenceserver.GRPCInferenceService.ModelMetadata:input_type -> nvidia.inferenceserver.ModelMetadataRequest
	12, // 35: nvidia.inferenceserver.GRPCInferenceService.ModelInfer:input_type -> nvidia.inferenceserver.ModelInferRequest
	12, // 36: nvidia.inferenceserver.GRPCInferenceService.ModelStreamInfer:input_type -> nvidia.inferenceserver.ModelInferRequest
	15, // 37: nvidia.inferenceserver.GRPCInferenceService.ModelConfig:input_type -> nvidia.inferenceserver.ModelConfigRequest
	17, // 38: nvidia.inferenceserver.GRPCInferenceService.ModelStatistics:input_type -> nvidia.inferenceserver.ModelStatisticsRequest
	21, // 39: nvidia.inferenceserver.GRPCInferenceService.RepositoryIndex:input_type -> nvidia.inferenceserver.RepositoryIndexRequest
	23, // 40: nvidia.inferenceserver.GRPCInferenceService.RepositoryModelLoad:input_type -> nvidia.inferenceserver.RepositoryModelLoadRequest
	25, // 41: nvidia.inferenceserver.GRPCInferenceService.RepositoryModelUnload:input_type -> nvidia.inferenceserver.RepositoryModelUnloadRequest
	27, // 42: nvidia.inferenceserver.GRPCInferenceService.SystemSharedMemoryStatus:input_type -> nvidia.inferenceserver.SystemSharedMemoryStatusRequest
	29, // 43: nvidia.inferenceserver.GRPCInferenceService.SystemSharedMemoryRegister:input_type -> nvidia.inferenceserver.SystemSharedMemoryRegisterRequest
	31, // 44: nvidia.inferenceserver.GRPCInferenceService.SystemSharedMemoryUnregister:input_type -> nvidia.inferenceserver.SystemSharedMemoryUnregisterRequest
	33, // 45: nvidia.inferenceserver.GRPCInferenceService.CudaSharedMemoryStatus:input_type -> nvidia.inferenceserver.CudaSharedMemoryStatusRequest
	35, // 46: nvidia.inferenceserver.GRPCInferenceService.CudaSharedMemoryRegister:input_type -> nvidia.inferenceserver.CudaSharedMemoryRegisterRequest
	37, // 47: nvidia.inferenceserver.GRPCInferenceService.CudaSharedMemoryUnregister:input_type -> nvidia.inferenceserver.CudaSharedMemoryUnregisterRequest
	1,  // 48: nvidia.inferenceserver.GRPCInferenceService.ServerLive:output_type -> nvidia.inferenceserver.ServerLiveResponse
	3,  // 49: nvidia.inferenceserver.GRPCInferenceService.ServerReady:output_type -> nvidia.inferenceserver.ServerReadyResponse
	5,  // 50: nvidia.inferenceserver.GRPCInferenceService.ModelReady:output_type -> nvidia.inferenceserver.ModelReadyResponse
	7,  // 51: nvidia.inferenceserver.GRPCInferenceService.ServerMetadata:output_type -> nvidia.inferenceserver.ServerMetadataResponse
	9,  // 52: nvidia.inferenceserver.GRPCInferenceService.ModelMetadata:output_type -> nvidia.inferenceserver.ModelMetadataResponse
	13, // 53: nvidia.inferenceserver.GRPCInferenceService.ModelInfer:output_type -> nvidia.inferenceserver.ModelInferResponse
	14, // 54: nvidia.inferenceserver.GRPCInferenceService.ModelStreamInfer:output_type -> nvidia.inferenceserver.ModelStreamInferResponse
	16, // 55: nvidia.inferenceserver.GRPCInferenceService.ModelConfig:output_type -> nvidia.inferenceserver.ModelConfigResponse
	20, // 56: nvidia.inferenceserver.GRPCInferenceService.ModelStatistics:output_type -> nvidia.inferenceserver.ModelStatisticsResponse
	22, // 57: nvidia.inferenceserver.GRPCInferenceService.RepositoryIndex:output_type -> nvidia.inferenceserver.RepositoryIndexResponse
	24, // 58: nvidia.inferenceserver.GRPCInferenceService.RepositoryModelLoad:output_type -> nvidia.inferenceserver.RepositoryModelLoadResponse
	26, // 59: nvidia.inferenceserver.GRPCInferenceService.RepositoryModelUnload:output_type -> nvidia.inferenceserver.RepositoryModelUnloadResponse
	28, // 60: nvidia.inferenceserver.GRPCInferenceService.SystemSharedMemoryStatus:output_type -> nvidia.inferenceserver.SystemSharedMemoryStatusResponse
	30, // 61: nvidia.inferenceserver.GRPCInferenceService.SystemSharedMemoryRegister:output_type -> nvidia.inferenceserver.SystemSharedMemoryRegisterResponse
	32, // 62: nvidia.inferenceserver.GRPCInferenceService.SystemSharedMemoryUnregister:output_type -> nvidia.inferenceserver.SystemSharedMemoryUnregisterResponse
	34, // 63: nvidia.inferenceserver.GRPCInferenceService.CudaSharedMemoryStatus:output_type -> nvidia.inferenceserver.CudaSharedMemoryStatusResponse
	36, // 64: nvidia.inferenceserver.GRPCInferenceService.CudaSharedMemoryRegister:output_type -> nvidia.inferenceserver.CudaSharedMemoryRegisterResponse
	38, // 65: nvidia.inferenceserver.GRPCInferenceService.CudaSharedMemoryUnregister:output_type -> nvidia.inferenceserver.CudaSharedMemoryUnregisterResponse
	48, // [48:66] is the sub-list for method output_type
	30, // [30:48] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_grpc_service_v2_proto_init() }
func file_grpc_service_v2_proto_init() {
	if File_grpc_service_v2_proto != nil {
		return
	}
	file_model_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_grpc_service_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerLiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerLiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferTensorContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelStreamInferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryModelLoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryModelLoadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryModelUnloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryModelUnloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSharedMemoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSharedMemoryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSharedMemoryRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSharedMemoryRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSharedMemoryUnregisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSharedMemoryUnregisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaSharedMemoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaSharedMemoryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaSharedMemoryRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaSharedMemoryRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaSharedMemoryUnregisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaSharedMemoryUnregisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelMetadataResponse_TensorMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInferRequest_InferInputTensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInferRequest_InferRequestedOutputTensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInferResponse_InferOutputTensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryIndexResponse_ModelIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSharedMemoryStatusResponse_RegionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_v2_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaSharedMemoryStatusResponse_RegionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_service_v2_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*InferParameter_BoolParam)(nil),
		(*InferParameter_Int64Param)(nil),
		(*InferParameter_StringParam)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_service_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_service_v2_proto_goTypes,
		DependencyIndexes: file_grpc_service_v2_proto_depIdxs,
		MessageInfos:      file_grpc_service_v2_proto_msgTypes,
	}.Build()
	File_grpc_service_v2_proto = out.File
	file_grpc_service_v2_proto_rawDesc = nil
	file_grpc_service_v2_proto_goTypes = nil
	file_grpc_service_v2_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GRPCInferenceServiceClient is the client API for GRPCInferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCInferenceServiceClient interface {
	//@@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
	//@@       (ServerLiveResponse)
	//@@
	//@@     Check liveness of the inference server.
	//@@
	ServerLive(ctx context.Context, in *ServerLiveRequest, opts ...grpc.CallOption) (*ServerLiveResponse, error)
	//@@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
	//@@       (ServerReadyResponse)
	//@@
	//@@     Check readiness of the inference server.
	//@@
	ServerReady(ctx context.Context, in *ServerReadyRequest, opts ...grpc.CallOption) (*ServerReadyResponse, error)
	//@@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
	//@@       (ModelReadyResponse)
	//@@
	//@@     Check readiness of a model in the inference server.
	//@@
	ModelReady(ctx context.Context, in *ModelReadyRequest, opts ...grpc.CallOption) (*ModelReadyResponse, error)
	//@@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
	//@@       (ServerMetadataResponse)
	//@@
	//@@     Get server metadata.
	//@@
	ServerMetadata(ctx context.Context, in *ServerMetadataRequest, opts ...grpc.CallOption) (*ServerMetadataResponse, error)
	//@@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
	//@@       (ModelMetadataResponse)
	//@@
	//@@     Get model metadata.
	//@@
	ModelMetadata(ctx context.Context, in *ModelMetadataRequest, opts ...grpc.CallOption) (*ModelMetadataResponse, error)
	//@@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
	//@@       (ModelInferResponse)
	//@@
	//@@     Perform inference using a specific model.
	//@@
	ModelInfer(ctx context.Context, in *ModelInferRequest, opts ...grpc.CallOption) (*ModelInferResponse, error)
	//@@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
	//@@       (stream ModelStreamInferResponse)
	//@@
	//@@     Perform streaming inference.
	//@@
	ModelStreamInfer(ctx context.Context, opts ...grpc.CallOption) (GRPCInferenceService_ModelStreamInferClient, error)
	//@@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
	//@@       (ModelConfigResponse)
	//@@
	//@@     Get model configuration.
	//@@
	ModelConfig(ctx context.Context, in *ModelConfigRequest, opts ...grpc.CallOption) (*ModelConfigResponse, error)
	//@@  .. cpp:var:: rpc ModelStatistics(
	//@@                     ModelStatisticsRequest)
	//@@                   returns (ModelStatisticsResponse)
	//@@
	//@@     Get the cumulative inference statistics for a model.
	//@@
	ModelStatistics(ctx context.Context, in *ModelStatisticsRequest, opts ...grpc.CallOption) (*ModelStatisticsResponse, error)
	//@@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
	//@@       (RepositoryIndexResponse)
	//@@
	//@@     Get the index of model repository contents.
	//@@
	RepositoryIndex(ctx context.Context, in *RepositoryIndexRequest, opts ...grpc.CallOption) (*RepositoryIndexResponse, error)
	//@@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
	//@@       (RepositoryModelLoadResponse)
	//@@
	//@@     Load or reload a model from a repository.
	//@@
	RepositoryModelLoad(ctx context.Context, in *RepositoryModelLoadRequest, opts ...grpc.CallOption) (*RepositoryModelLoadResponse, error)
	//@@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
	// returns
	//@@       (RepositoryModelUnloadResponse)
	//@@
	//@@     Unload a model.
	//@@
	RepositoryModelUnload(ctx context.Context, in *RepositoryModelUnloadRequest, opts ...grpc.CallOption) (*RepositoryModelUnloadResponse, error)
	//@@  .. cpp:var:: rpc SystemSharedMemoryStatus(
	//@@                     SystemSharedMemoryStatusRequest)
	//@@                   returns (SystemSharedMemoryStatusRespose)
	//@@
	//@@     Get the status of all registered system-shared-memory regions.
	//@@
	SystemSharedMemoryStatus(ctx context.Context, in *SystemSharedMemoryStatusRequest, opts ...grpc.CallOption) (*SystemSharedMemoryStatusResponse, error)
	//@@  .. cpp:var:: rpc SystemSharedMemoryRegister(
	//@@                     SystemSharedMemoryRegisterRequest)
	//@@                   returns (SystemSharedMemoryRegisterResponse)
	//@@
	//@@     Register a system-shared-memory region.
	//@@
	SystemSharedMemoryRegister(ctx context.Context, in *SystemSharedMemoryRegisterRequest, opts ...grpc.CallOption) (*SystemSharedMemoryRegisterResponse, error)
	//@@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
	//@@                     SystemSharedMemoryUnregisterRequest)
	//@@                   returns (SystemSharedMemoryUnregisterResponse)
	//@@
	//@@     Unregister a system-shared-memory region.
	//@@
	SystemSharedMemoryUnregister(ctx context.Context, in *SystemSharedMemoryUnregisterRequest, opts ...grpc.CallOption) (*SystemSharedMemoryUnregisterResponse, error)
	//@@  .. cpp:var:: rpc CudaSharedMemoryStatus(
	//@@                     CudaSharedMemoryStatusRequest)
	//@@                   returns (CudaSharedMemoryStatusRespose)
	//@@
	//@@     Get the status of all registered CUDA-shared-memory regions.
	//@@
	CudaSharedMemoryStatus(ctx context.Context, in *CudaSharedMemoryStatusRequest, opts ...grpc.CallOption) (*CudaSharedMemoryStatusResponse, error)
	//@@  .. cpp:var:: rpc CudaSharedMemoryRegister(
	//@@                     CudaSharedMemoryRegisterRequest)
	//@@                   returns (CudaSharedMemoryRegisterResponse)
	//@@
	//@@     Register a CUDA-shared-memory region.
	//@@
	CudaSharedMemoryRegister(ctx context.Context, in *CudaSharedMemoryRegisterRequest, opts ...grpc.CallOption) (*CudaSharedMemoryRegisterResponse, error)
	//@@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
	//@@                     CudaSharedMemoryUnregisterRequest)
	//@@                   returns (CudaSharedMemoryUnregisterResponse)
	//@@
	//@@     Unregister a CUDA-shared-memory region.
	//@@
	CudaSharedMemoryUnregister(ctx context.Context, in *CudaSharedMemoryUnregisterRequest, opts ...grpc.CallOption) (*CudaSharedMemoryUnregisterResponse, error)
}

type gRPCInferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCInferenceServiceClient(cc grpc.ClientConnInterface) GRPCInferenceServiceClient {
	return &gRPCInferenceServiceClient{cc}
}

func (c *gRPCInferenceServiceClient) ServerLive(ctx context.Context, in *ServerLiveRequest, opts ...grpc.CallOption) (*ServerLiveResponse, error) {
	out := new(ServerLiveResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/ServerLive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) ServerReady(ctx context.Context, in *ServerReadyRequest, opts ...grpc.CallOption) (*ServerReadyResponse, error) {
	out := new(ServerReadyResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/ServerReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) ModelReady(ctx context.Context, in *ModelReadyRequest, opts ...grpc.CallOption) (*ModelReadyResponse, error) {
	out := new(ModelReadyResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/ModelReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) ServerMetadata(ctx context.Context, in *ServerMetadataRequest, opts ...grpc.CallOption) (*ServerMetadataResponse, error) {
	out := new(ServerMetadataResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/ServerMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) ModelMetadata(ctx context.Context, in *ModelMetadataRequest, opts ...grpc.CallOption) (*ModelMetadataResponse, error) {
	out := new(ModelMetadataResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/ModelMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) ModelInfer(ctx context.Context, in *ModelInferRequest, opts ...grpc.CallOption) (*ModelInferResponse, error) {
	out := new(ModelInferResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/ModelInfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) ModelStreamInfer(ctx context.Context, opts ...grpc.CallOption) (GRPCInferenceService_ModelStreamInferClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCInferenceService_serviceDesc.Streams[0], "/nvidia.inferenceserver.GRPCInferenceService/ModelStreamInfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCInferenceServiceModelStreamInferClient{stream}
	return x, nil
}

type GRPCInferenceService_ModelStreamInferClient interface {
	Send(*ModelInferRequest) error
	Recv() (*ModelStreamInferResponse, error)
	grpc.ClientStream
}

type gRPCInferenceServiceModelStreamInferClient struct {
	grpc.ClientStream
}

func (x *gRPCInferenceServiceModelStreamInferClient) Send(m *ModelInferRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCInferenceServiceModelStreamInferClient) Recv() (*ModelStreamInferResponse, error) {
	m := new(ModelStreamInferResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCInferenceServiceClient) ModelConfig(ctx context.Context, in *ModelConfigRequest, opts ...grpc.CallOption) (*ModelConfigResponse, error) {
	out := new(ModelConfigResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/ModelConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) ModelStatistics(ctx context.Context, in *ModelStatisticsRequest, opts ...grpc.CallOption) (*ModelStatisticsResponse, error) {
	out := new(ModelStatisticsResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/ModelStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) RepositoryIndex(ctx context.Context, in *RepositoryIndexRequest, opts ...grpc.CallOption) (*RepositoryIndexResponse, error) {
	out := new(RepositoryIndexResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/RepositoryIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) RepositoryModelLoad(ctx context.Context, in *RepositoryModelLoadRequest, opts ...grpc.CallOption) (*RepositoryModelLoadResponse, error) {
	out := new(RepositoryModelLoadResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/RepositoryModelLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) RepositoryModelUnload(ctx context.Context, in *RepositoryModelUnloadRequest, opts ...grpc.CallOption) (*RepositoryModelUnloadResponse, error) {
	out := new(RepositoryModelUnloadResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/RepositoryModelUnload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) SystemSharedMemoryStatus(ctx context.Context, in *SystemSharedMemoryStatusRequest, opts ...grpc.CallOption) (*SystemSharedMemoryStatusResponse, error) {
	out := new(SystemSharedMemoryStatusResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/SystemSharedMemoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) SystemSharedMemoryRegister(ctx context.Context, in *SystemSharedMemoryRegisterRequest, opts ...grpc.CallOption) (*SystemSharedMemoryRegisterResponse, error) {
	out := new(SystemSharedMemoryRegisterResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/SystemSharedMemoryRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) SystemSharedMemoryUnregister(ctx context.Context, in *SystemSharedMemoryUnregisterRequest, opts ...grpc.CallOption) (*SystemSharedMemoryUnregisterResponse, error) {
	out := new(SystemSharedMemoryUnregisterResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/SystemSharedMemoryUnregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) CudaSharedMemoryStatus(ctx context.Context, in *CudaSharedMemoryStatusRequest, opts ...grpc.CallOption) (*CudaSharedMemoryStatusResponse, error) {
	out := new(CudaSharedMemoryStatusResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/CudaSharedMemoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) CudaSharedMemoryRegister(ctx context.Context, in *CudaSharedMemoryRegisterRequest, opts ...grpc.CallOption) (*CudaSharedMemoryRegisterResponse, error) {
	out := new(CudaSharedMemoryRegisterResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/CudaSharedMemoryRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCInferenceServiceClient) CudaSharedMemoryUnregister(ctx context.Context, in *CudaSharedMemoryUnregisterRequest, opts ...grpc.CallOption) (*CudaSharedMemoryUnregisterResponse, error) {
	out := new(CudaSharedMemoryUnregisterResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCInferenceService/CudaSharedMemoryUnregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCInferenceServiceServer is the server API for GRPCInferenceService service.
type GRPCInferenceServiceServer interface {
	//@@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
	//@@       (ServerLiveResponse)
	//@@
	//@@     Check liveness of the inference server.
	//@@
	ServerLive(context.Context, *ServerLiveRequest) (*ServerLiveResponse, error)
	//@@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
	//@@       (ServerReadyResponse)
	//@@
	//@@     Check readiness of the inference server.
	//@@
	ServerReady(context.Context, *ServerReadyRequest) (*ServerReadyResponse, error)
	//@@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
	//@@       (ModelReadyResponse)
	//@@
	//@@     Check readiness of a model in the inference server.
	//@@
	ModelReady(context.Context, *ModelReadyRequest) (*ModelReadyResponse, error)
	//@@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
	//@@       (ServerMetadataResponse)
	//@@
	//@@     Get server metadata.
	//@@
	ServerMetadata(context.Context, *ServerMetadataRequest) (*ServerMetadataResponse, error)
	//@@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
	//@@       (ModelMetadataResponse)
	//@@
	//@@     Get model metadata.
	//@@
	ModelMetadata(context.Context, *ModelMetadataRequest) (*ModelMetadataResponse, error)
	//@@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
	//@@       (ModelInferResponse)
	//@@
	//@@     Perform inference using a specific model.
	//@@
	ModelInfer(context.Context, *ModelInferRequest) (*ModelInferResponse, error)
	//@@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
	//@@       (stream ModelStreamInferResponse)
	//@@
	//@@     Perform streaming inference.
	//@@
	ModelStreamInfer(GRPCInferenceService_ModelStreamInferServer) error
	//@@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
	//@@       (ModelConfigResponse)
	//@@
	//@@     Get model configuration.
	//@@
	ModelConfig(context.Context, *ModelConfigRequest) (*ModelConfigResponse, error)
	//@@  .. cpp:var:: rpc ModelStatistics(
	//@@                     ModelStatisticsRequest)
	//@@                   returns (ModelStatisticsResponse)
	//@@
	//@@     Get the cumulative inference statistics for a model.
	//@@
	ModelStatistics(context.Context, *ModelStatisticsRequest) (*ModelStatisticsResponse, error)
	//@@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
	//@@       (RepositoryIndexResponse)
	//@@
	//@@     Get the index of model repository contents.
	//@@
	RepositoryIndex(context.Context, *RepositoryIndexRequest) (*RepositoryIndexResponse, error)
	//@@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
	//@@       (RepositoryModelLoadResponse)
	//@@
	//@@     Load or reload a model from a repository.
	//@@
	RepositoryModelLoad(context.Context, *RepositoryModelLoadRequest) (*RepositoryModelLoadResponse, error)
	//@@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
	// returns
	//@@       (RepositoryModelUnloadResponse)
	//@@
	//@@     Unload a model.
	//@@
	RepositoryModelUnload(context.Context, *RepositoryModelUnloadRequest) (*RepositoryModelUnloadResponse, error)
	//@@  .. cpp:var:: rpc SystemSharedMemoryStatus(
	//@@                     SystemSharedMemoryStatusRequest)
	//@@                   returns (SystemSharedMemoryStatusRespose)
	//@@
	//@@     Get the status of all registered system-shared-memory regions.
	//@@
	SystemSharedMemoryStatus(context.Context, *SystemSharedMemoryStatusRequest) (*SystemSharedMemoryStatusResponse, error)
	//@@  .. cpp:var:: rpc SystemSharedMemoryRegister(
	//@@                     SystemSharedMemoryRegisterRequest)
	//@@                   returns (SystemSharedMemoryRegisterResponse)
	//@@
	//@@     Register a system-shared-memory region.
	//@@
	SystemSharedMemoryRegister(context.Context, *SystemSharedMemoryRegisterRequest) (*SystemSharedMemoryRegisterResponse, error)
	//@@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
	//@@                     SystemSharedMemoryUnregisterRequest)
	//@@                   returns (SystemSharedMemoryUnregisterResponse)
	//@@
	//@@     Unregister a system-shared-memory region.
	//@@
	SystemSharedMemoryUnregister(context.Context, *SystemSharedMemoryUnregisterRequest) (*SystemSharedMemoryUnregisterResponse, error)
	//@@  .. cpp:var:: rpc CudaSharedMemoryStatus(
	//@@                     CudaSharedMemoryStatusRequest)
	//@@                   returns (CudaSharedMemoryStatusRespose)
	//@@
	//@@     Get the status of all registered CUDA-shared-memory regions.
	//@@
	CudaSharedMemoryStatus(context.Context, *CudaSharedMemoryStatusRequest) (*CudaSharedMemoryStatusResponse, error)
	//@@  .. cpp:var:: rpc CudaSharedMemoryRegister(
	//@@                     CudaSharedMemoryRegisterRequest)
	//@@                   returns (CudaSharedMemoryRegisterResponse)
	//@@
	//@@     Register a CUDA-shared-memory region.
	//@@
	CudaSharedMemoryRegister(context.Context, *CudaSharedMemoryRegisterRequest) (*CudaSharedMemoryRegisterResponse, error)
	//@@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
	//@@                     CudaSharedMemoryUnregisterRequest)
	//@@                   returns (CudaSharedMemoryUnregisterResponse)
	//@@
	//@@     Unregister a CUDA-shared-memory region.
	//@@
	CudaSharedMemoryUnregister(context.Context, *CudaSharedMemoryUnregisterRequest) (*CudaSharedMemoryUnregisterResponse, error)
}

// UnimplementedGRPCInferenceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCInferenceServiceServer struct {
}

func (*UnimplementedGRPCInferenceServiceServer) ServerLive(context.Context, *ServerLiveRequest) (*ServerLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerLive not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) ServerReady(context.Context, *ServerReadyRequest) (*ServerReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerReady not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) ModelReady(context.Context, *ModelReadyRequest) (*ModelReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelReady not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) ServerMetadata(context.Context, *ServerMetadataRequest) (*ServerMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerMetadata not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) ModelMetadata(context.Context, *ModelMetadataRequest) (*ModelMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelMetadata not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) ModelInfer(context.Context, *ModelInferRequest) (*ModelInferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelInfer not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) ModelStreamInfer(GRPCInferenceService_ModelStreamInferServer) error {
	return status.Errorf(codes.Unimplemented, "method ModelStreamInfer not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) ModelConfig(context.Context, *ModelConfigRequest) (*ModelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelConfig not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) ModelStatistics(context.Context, *ModelStatisticsRequest) (*ModelStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelStatistics not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) RepositoryIndex(context.Context, *RepositoryIndexRequest) (*RepositoryIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepositoryIndex not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) RepositoryModelLoad(context.Context, *RepositoryModelLoadRequest) (*RepositoryModelLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepositoryModelLoad not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) RepositoryModelUnload(context.Context, *RepositoryModelUnloadRequest) (*RepositoryModelUnloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepositoryModelUnload not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) SystemSharedMemoryStatus(context.Context, *SystemSharedMemoryStatusRequest) (*SystemSharedMemoryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemSharedMemoryStatus not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) SystemSharedMemoryRegister(context.Context, *SystemSharedMemoryRegisterRequest) (*SystemSharedMemoryRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemSharedMemoryRegister not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) SystemSharedMemoryUnregister(context.Context, *SystemSharedMemoryUnregisterRequest) (*SystemSharedMemoryUnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemSharedMemoryUnregister not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) CudaSharedMemoryStatus(context.Context, *CudaSharedMemoryStatusRequest) (*CudaSharedMemoryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CudaSharedMemoryStatus not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) CudaSharedMemoryRegister(context.Context, *CudaSharedMemoryRegisterRequest) (*CudaSharedMemoryRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CudaSharedMemoryRegister not implemented")
}
func (*UnimplementedGRPCInferenceServiceServer) CudaSharedMemoryUnregister(context.Context, *CudaSharedMemoryUnregisterRequest) (*CudaSharedMemoryUnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CudaSharedMemoryUnregister not implemented")
}

func RegisterGRPCInferenceServiceServer(s *grpc.Server, srv GRPCInferenceServiceServer) {
	s.RegisterService(&_GRPCInferenceService_serviceDesc, srv)
}

func _GRPCInferenceService_ServerLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).ServerLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/ServerLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).ServerLive(ctx, req.(*ServerLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_ServerReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).ServerReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/ServerReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).ServerReady(ctx, req.(*ServerReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_ModelReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).ModelReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/ModelReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).ModelReady(ctx, req.(*ModelReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_ServerMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).ServerMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/ServerMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).ServerMetadata(ctx, req.(*ServerMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_ModelMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).ModelMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/ModelMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).ModelMetadata(ctx, req.(*ModelMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_ModelInfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).ModelInfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/ModelInfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).ModelInfer(ctx, req.(*ModelInferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_ModelStreamInfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCInferenceServiceServer).ModelStreamInfer(&gRPCInferenceServiceModelStreamInferServer{stream})
}

type GRPCInferenceService_ModelStreamInferServer interface {
	Send(*ModelStreamInferResponse) error
	Recv() (*ModelInferRequest, error)
	grpc.ServerStream
}

type gRPCInferenceServiceModelStreamInferServer struct {
	grpc.ServerStream
}

func (x *gRPCInferenceServiceModelStreamInferServer) Send(m *ModelStreamInferResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCInferenceServiceModelStreamInferServer) Recv() (*ModelInferRequest, error) {
	m := new(ModelInferRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPCInferenceService_ModelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).ModelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/ModelConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).ModelConfig(ctx, req.(*ModelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_ModelStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).ModelStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/ModelStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).ModelStatistics(ctx, req.(*ModelStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_RepositoryIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).RepositoryIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/RepositoryIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).RepositoryIndex(ctx, req.(*RepositoryIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_RepositoryModelLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryModelLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).RepositoryModelLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/RepositoryModelLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).RepositoryModelLoad(ctx, req.(*RepositoryModelLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_RepositoryModelUnload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryModelUnloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).RepositoryModelUnload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/RepositoryModelUnload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).RepositoryModelUnload(ctx, req.(*RepositoryModelUnloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_SystemSharedMemoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSharedMemoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).SystemSharedMemoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/SystemSharedMemoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).SystemSharedMemoryStatus(ctx, req.(*SystemSharedMemoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_SystemSharedMemoryRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSharedMemoryRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).SystemSharedMemoryRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/SystemSharedMemoryRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).SystemSharedMemoryRegister(ctx, req.(*SystemSharedMemoryRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_SystemSharedMemoryUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSharedMemoryUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).SystemSharedMemoryUnregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/SystemSharedMemoryUnregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).SystemSharedMemoryUnregister(ctx, req.(*SystemSharedMemoryUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_CudaSharedMemoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CudaSharedMemoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).CudaSharedMemoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/CudaSharedMemoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).CudaSharedMemoryStatus(ctx, req.(*CudaSharedMemoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_CudaSharedMemoryRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CudaSharedMemoryRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).CudaSharedMemoryRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/CudaSharedMemoryRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).CudaSharedMemoryRegister(ctx, req.(*CudaSharedMemoryRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCInferenceService_CudaSharedMemoryUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CudaSharedMemoryUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCInferenceServiceServer).CudaSharedMemoryUnregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCInferenceService/CudaSharedMemoryUnregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCInferenceServiceServer).CudaSharedMemoryUnregister(ctx, req.(*CudaSharedMemoryUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCInferenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nvidia.inferenceserver.GRPCInferenceService",
	HandlerType: (*GRPCInferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerLive",
			Handler:    _GRPCInferenceService_ServerLive_Handler,
		},
		{
			MethodName: "ServerReady",
			Handler:    _GRPCInferenceService_ServerReady_Handler,
		},
		{
			MethodName: "ModelReady",
			Handler:    _GRPCInferenceService_ModelReady_Handler,
		},
		{
			MethodName: "ServerMetadata",
			Handler:    _GRPCInferenceService_ServerMetadata_Handler,
		},
		{
			MethodName: "ModelMetadata",
			Handler:    _GRPCInferenceService_ModelMetadata_Handler,
		},
		{
			MethodName: "ModelInfer",
			Handler:    _GRPCInferenceService_ModelInfer_Handler,
		},
		{
			MethodName: "ModelConfig",
			Handler:    _GRPCInferenceService_ModelConfig_Handler,
		},
		{
			MethodName: "ModelStatistics",
			Handler:    _GRPCInferenceService_ModelStatistics_Handler,
		},
		{
			MethodName: "RepositoryIndex",
			Handler:    _GRPCInferenceService_RepositoryIndex_Handler,
		},
		{
			MethodName: "RepositoryModelLoad",
			Handler:    _GRPCInferenceService_RepositoryModelLoad_Handler,
		},
		{
			MethodName: "RepositoryModelUnload",
			Handler:    _GRPCInferenceService_RepositoryModelUnload_Handler,
		},
		{
			MethodName: "SystemSharedMemoryStatus",
			Handler:    _GRPCInferenceService_SystemSharedMemoryStatus_Handler,
		},
		{
			MethodName: "SystemSharedMemoryRegister",
			Handler:    _GRPCInferenceService_SystemSharedMemoryRegister_Handler,
		},
		{
			MethodName: "SystemSharedMemoryUnregister",
			Handler:    _GRPCInferenceService_SystemSharedMemoryUnregister_Handler,
		},
		{
			MethodName: "CudaSharedMemoryStatus",
			Handler:    _GRPCInferenceService_CudaSharedMemoryStatus_Handler,
		},
		{
			MethodName: "CudaSharedMemoryRegister",
			Handler:    _GRPCInferenceService_CudaSharedMemoryRegister_Handler,
		},
		{
			MethodName: "CudaSharedMemoryUnregister",
			Handler:    _GRPCInferenceService_CudaSharedMemoryUnregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ModelStreamInfer",
			Handler:       _GRPCInferenceService_ModelStreamInfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_service_v2.proto",
}
