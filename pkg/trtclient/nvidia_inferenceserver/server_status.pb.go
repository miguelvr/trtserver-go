// Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        (unknown)
// source: server_status.proto

package nvidia_inferenceserver

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//@@
//@@.. cpp:enum:: ModelReadyState
//@@
//@@   Readiness status for models.
//@@
type ModelReadyState int32

const (
	//@@  .. cpp:enumerator:: ModelReadyState::MODEL_UNKNOWN = 0
	//@@
	//@@     The model is in an unknown state. The model is not available for
	//@@     inferencing.
	//@@
	ModelReadyState_MODEL_UNKNOWN ModelReadyState = 0
	//@@  .. cpp:enumerator:: ModelReadyState::MODEL_READY = 1
	//@@
	//@@     The model is ready and available for inferencing.
	//@@
	ModelReadyState_MODEL_READY ModelReadyState = 1
	//@@  .. cpp:enumerator:: ModelReadyState::MODEL_UNAVAILABLE = 2
	//@@
	//@@     The model is unavailable, indicating that the model failed to
	//@@     load or has been implicitly or explicitly unloaded. The model is
	//@@     not available for inferencing.
	//@@
	ModelReadyState_MODEL_UNAVAILABLE ModelReadyState = 2
	//@@  .. cpp:enumerator:: ModelReadyState::MODEL_LOADING = 3
	//@@
	//@@     The model is being loaded by the inference server. The model is
	//@@     not available for inferencing.
	//@@
	ModelReadyState_MODEL_LOADING ModelReadyState = 3
	//@@  .. cpp:enumerator:: ModelReadyState::MODEL_UNLOADING = 4
	//@@
	//@@     The model is being unloaded by the inference server. The model is
	//@@     not available for inferencing.
	//@@
	ModelReadyState_MODEL_UNLOADING ModelReadyState = 4
)

// Enum value maps for ModelReadyState.
var (
	ModelReadyState_name = map[int32]string{
		0: "MODEL_UNKNOWN",
		1: "MODEL_READY",
		2: "MODEL_UNAVAILABLE",
		3: "MODEL_LOADING",
		4: "MODEL_UNLOADING",
	}
	ModelReadyState_value = map[string]int32{
		"MODEL_UNKNOWN":     0,
		"MODEL_READY":       1,
		"MODEL_UNAVAILABLE": 2,
		"MODEL_LOADING":     3,
		"MODEL_UNLOADING":   4,
	}
)

func (x ModelReadyState) Enum() *ModelReadyState {
	p := new(ModelReadyState)
	*p = x
	return p
}

func (x ModelReadyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelReadyState) Descriptor() protoreflect.EnumDescriptor {
	return file_server_status_proto_enumTypes[0].Descriptor()
}

func (ModelReadyState) Type() protoreflect.EnumType {
	return &file_server_status_proto_enumTypes[0]
}

func (x ModelReadyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelReadyState.Descriptor instead.
func (ModelReadyState) EnumDescriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{0}
}

//@@
//@@.. cpp:enum:: ServerReadyState
//@@
//@@   Readiness status for the inference server.
//@@
type ServerReadyState int32

const (
	//@@  .. cpp:enumerator:: ServerReadyState::SERVER_INVALID = 0
	//@@
	//@@     The server is in an invalid state and will likely not
	//@@     response correctly to any requests.
	//@@
	ServerReadyState_SERVER_INVALID ServerReadyState = 0
	//@@  .. cpp:enumerator:: ServerReadyState::SERVER_INITIALIZING = 1
	//@@
	//@@     The server is initializing.
	//@@
	ServerReadyState_SERVER_INITIALIZING ServerReadyState = 1
	//@@  .. cpp:enumerator:: ServerReadyState::SERVER_READY = 2
	//@@
	//@@     The server is ready and accepting requests.
	//@@
	ServerReadyState_SERVER_READY ServerReadyState = 2
	//@@  .. cpp:enumerator:: ServerReadyState::SERVER_EXITING = 3
	//@@
	//@@     The server is exiting and will not respond to requests.
	//@@
	ServerReadyState_SERVER_EXITING ServerReadyState = 3
	//@@  .. cpp:enumerator:: ServerReadyState::SERVER_FAILED_TO_INITIALIZE = 10
	//@@
	//@@     The server did not initialize correctly. Most requests will fail.
	//@@
	ServerReadyState_SERVER_FAILED_TO_INITIALIZE ServerReadyState = 10
)

// Enum value maps for ServerReadyState.
var (
	ServerReadyState_name = map[int32]string{
		0:  "SERVER_INVALID",
		1:  "SERVER_INITIALIZING",
		2:  "SERVER_READY",
		3:  "SERVER_EXITING",
		10: "SERVER_FAILED_TO_INITIALIZE",
	}
	ServerReadyState_value = map[string]int32{
		"SERVER_INVALID":              0,
		"SERVER_INITIALIZING":         1,
		"SERVER_READY":                2,
		"SERVER_EXITING":              3,
		"SERVER_FAILED_TO_INITIALIZE": 10,
	}
)

func (x ServerReadyState) Enum() *ServerReadyState {
	p := new(ServerReadyState)
	*p = x
	return p
}

func (x ServerReadyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerReadyState) Descriptor() protoreflect.EnumDescriptor {
	return file_server_status_proto_enumTypes[1].Descriptor()
}

func (ServerReadyState) Type() protoreflect.EnumType {
	return &file_server_status_proto_enumTypes[1]
}

func (x ServerReadyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerReadyState.Descriptor instead.
func (ServerReadyState) EnumDescriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{1}
}

//@@
//@@.. cpp:var:: message StatDuration
//@@
//@@   Statistic collecting a duration metric.
//@@
type StatDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: uint64 count
	//@@
	//@@     Cumulative number of times this metric occurred.
	//@@
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	//@@  .. cpp:var:: uint64 total_time_ns
	//@@
	//@@     Total collected duration of this metric in nanoseconds.
	//@@
	TotalTimeNs uint64 `protobuf:"varint,2,opt,name=total_time_ns,json=totalTimeNs,proto3" json:"total_time_ns,omitempty"`
}

func (x *StatDuration) Reset() {
	*x = StatDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatDuration) ProtoMessage() {}

func (x *StatDuration) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatDuration.ProtoReflect.Descriptor instead.
func (*StatDuration) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{0}
}

func (x *StatDuration) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StatDuration) GetTotalTimeNs() uint64 {
	if x != nil {
		return x.TotalTimeNs
	}
	return 0
}

//@@
//@@.. cpp:var:: message StatusRequestStats
//@@
//@@   Statistics collected for Status requests.
//@@
type StatusRequestStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: StatDuration success
	//@@
	//@@     Total time required to handle successful Status requests, not
	//@@     including HTTP or gRPC endpoint termination time.
	//@@
	Success *StatDuration `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *StatusRequestStats) Reset() {
	*x = StatusRequestStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequestStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequestStats) ProtoMessage() {}

func (x *StatusRequestStats) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequestStats.ProtoReflect.Descriptor instead.
func (*StatusRequestStats) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{1}
}

func (x *StatusRequestStats) GetSuccess() *StatDuration {
	if x != nil {
		return x.Success
	}
	return nil
}

//@@
//@@.. cpp:var:: message HealthRequestStats
//@@
//@@   Statistics collected for Health requests.
//@@
type HealthRequestStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: StatDuration success
	//@@
	//@@     Total time required to handle successful Health requests, not
	//@@     including HTTP or gRPC endpoint termination time.
	//@@
	Success *StatDuration `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *HealthRequestStats) Reset() {
	*x = HealthRequestStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequestStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequestStats) ProtoMessage() {}

func (x *HealthRequestStats) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequestStats.ProtoReflect.Descriptor instead.
func (*HealthRequestStats) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{2}
}

func (x *HealthRequestStats) GetSuccess() *StatDuration {
	if x != nil {
		return x.Success
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelControlRequestStats
//@@
//@@   Statistics collected for ModelControl requests.
//@@
type ModelControlRequestStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: StatDuration success
	//@@
	//@@     Total time required to handle successful ModelControl requests, not
	//@@     including HTTP or gRPC endpoint termination time.
	//@@
	Success *StatDuration `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ModelControlRequestStats) Reset() {
	*x = ModelControlRequestStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelControlRequestStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelControlRequestStats) ProtoMessage() {}

func (x *ModelControlRequestStats) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelControlRequestStats.ProtoReflect.Descriptor instead.
func (*ModelControlRequestStats) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{3}
}

func (x *ModelControlRequestStats) GetSuccess() *StatDuration {
	if x != nil {
		return x.Success
	}
	return nil
}

//@@
//@@.. cpp:var:: message SharedMemoryControlRequestStats
//@@
//@@   Statistics for SharedMemoryControl requests
//@@
//@@   [DEPRECATED] The message has been deprecated and will
//@@   always report 0.
//@@
//
// Deprecated: Do not use.
type SharedMemoryControlRequestStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: StatDuration success
	//@@
	//@@     Total time required to handle successful SharedMemoryControl
	//@@     requests, not including HTTP or gRPC endpoint termination time.
	//@@
	Success *StatDuration `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SharedMemoryControlRequestStats) Reset() {
	*x = SharedMemoryControlRequestStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlRequestStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlRequestStats) ProtoMessage() {}

func (x *SharedMemoryControlRequestStats) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlRequestStats.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlRequestStats) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{4}
}

func (x *SharedMemoryControlRequestStats) GetSuccess() *StatDuration {
	if x != nil {
		return x.Success
	}
	return nil
}

//@@
//@@.. cpp:var:: message RepositoryRequestStats
//@@
//@@   Statistics collected for Repository requests.
//@@
type RepositoryRequestStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: StatDuration success
	//@@
	//@@     Total time required to handle successful Repository requests, not
	//@@     including HTTP or gRPC endpoint termination time.
	//@@
	Success *StatDuration `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RepositoryRequestStats) Reset() {
	*x = RepositoryRequestStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryRequestStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryRequestStats) ProtoMessage() {}

func (x *RepositoryRequestStats) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryRequestStats.ProtoReflect.Descriptor instead.
func (*RepositoryRequestStats) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{5}
}

func (x *RepositoryRequestStats) GetSuccess() *StatDuration {
	if x != nil {
		return x.Success
	}
	return nil
}

//@@
//@@.. cpp:var:: message InferRequestStats
//@@
//@@   Statistics collected for Infer requests.
//@@
type InferRequestStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: StatDuration success
	//@@
	//@@     Total time required to handle successful Infer requests, not
	//@@     including HTTP or GRPC endpoint handling time.
	//@@
	Success *StatDuration `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	//@@  .. cpp:var:: StatDuration failed
	//@@
	//@@     Total time required to handle failed Infer requests, not
	//@@     including HTTP or GRPC endpoint handling time.
	//@@
	Failed *StatDuration `protobuf:"bytes,2,opt,name=failed,proto3" json:"failed,omitempty"`
	//@@  .. cpp:var:: StatDuration compute
	//@@
	//@@     Time required to run inferencing for an inference request;
	//@@     including time copying input tensors to GPU memory, time
	//@@     executing the model, and time copying output tensors from GPU
	//@@     memory.
	//@@
	Compute *StatDuration `protobuf:"bytes,3,opt,name=compute,proto3" json:"compute,omitempty"`
	//@@  .. cpp:var:: StatDuration queue
	//@@
	//@@     Time an inference request waits in scheduling queue for an
	//@@     available model instance.
	//@@
	Queue *StatDuration `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`
	//@@  .. cpp:var:: StatisticDuration compute_input
	//@@
	//@@    The count and cumulative duration to prepare input tensor data as
	//@@    required by the model framework / backend. For example, this duration
	//@@    should include the time to copy input tensor data to the GPU.
	//@@
	ComputeInput *StatDuration `protobuf:"bytes,5,opt,name=compute_input,json=computeInput,proto3" json:"compute_input,omitempty"`
	//@@  .. cpp:var:: StatisticDuration compute_infer
	//@@
	//@@     The count and cumulative duration to execute the model.
	//@@
	ComputeInfer *StatDuration `protobuf:"bytes,6,opt,name=compute_infer,json=computeInfer,proto3" json:"compute_infer,omitempty"`
	//@@  .. cpp:var:: StatisticDuration compute_output
	//@@
	//@@     The count and cumulative duration to extract output tensor data
	//@@     produced by the model framework / backend. For example, this duration
	//@@     should include the time to copy output tensor data from the GPU.
	//@@
	ComputeOutput *StatDuration `protobuf:"bytes,7,opt,name=compute_output,json=computeOutput,proto3" json:"compute_output,omitempty"`
}

func (x *InferRequestStats) Reset() {
	*x = InferRequestStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferRequestStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferRequestStats) ProtoMessage() {}

func (x *InferRequestStats) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferRequestStats.ProtoReflect.Descriptor instead.
func (*InferRequestStats) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{6}
}

func (x *InferRequestStats) GetSuccess() *StatDuration {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *InferRequestStats) GetFailed() *StatDuration {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *InferRequestStats) GetCompute() *StatDuration {
	if x != nil {
		return x.Compute
	}
	return nil
}

func (x *InferRequestStats) GetQueue() *StatDuration {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *InferRequestStats) GetComputeInput() *StatDuration {
	if x != nil {
		return x.ComputeInput
	}
	return nil
}

func (x *InferRequestStats) GetComputeInfer() *StatDuration {
	if x != nil {
		return x.ComputeInfer
	}
	return nil
}

func (x *InferRequestStats) GetComputeOutput() *StatDuration {
	if x != nil {
		return x.ComputeOutput
	}
	return nil
}

//@@
//@@.. cpp:enum:: ModelReadyStateReason
//@@
//@@   Detail associated with a model's readiness status.
//@@
type ModelReadyStateReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string message
	//@@
	//@@     The message that explains the cause of being in the current readiness
	//@@     state.
	//@@
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ModelReadyStateReason) Reset() {
	*x = ModelReadyStateReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelReadyStateReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelReadyStateReason) ProtoMessage() {}

func (x *ModelReadyStateReason) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelReadyStateReason.ProtoReflect.Descriptor instead.
func (*ModelReadyStateReason) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{7}
}

func (x *ModelReadyStateReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//@@
//@@.. cpp:var:: message ModelVersionStatus
//@@
//@@   Status for a version of a model.
//@@
type ModelVersionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: ModelReadyState ready_state
	//@@
	//@@     Current readiness state for the model.
	//@@
	ReadyState ModelReadyState `protobuf:"varint,1,opt,name=ready_state,json=readyState,proto3,enum=nvidia.inferenceserver.ModelReadyState" json:"ready_state,omitempty"`
	//@@  .. cpp:var:: ModelReadyStateReason ready_state_reason
	//@@
	//@@     Supplemental information regarding the current readiness state.
	//@@
	ReadyStateReason *ModelReadyStateReason `protobuf:"bytes,5,opt,name=ready_state_reason,json=readyStateReason,proto3" json:"ready_state_reason,omitempty"`
	//@@  .. cpp:var:: map<uint32, InferRequestStats> infer_stats
	//@@
	//@@     Inference statistics for the model, as a map from batch size
	//@@     to the statistics. A batch size will not occur in the map
	//@@     unless there has been at least one inference request of
	//@@     that batch size. However, for V2 API all InferRequestStats are
	//@@     recorded at a single key which is 1.
	//@@
	InferStats map[uint32]*InferRequestStats `protobuf:"bytes,2,rep,name=infer_stats,json=inferStats,proto3" json:"infer_stats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@@  .. cpp:var:: uint64 model_execution_count
	//@@
	//@@     Cumulative number of model executions performed for the
	//@@     model. A single model execution performs inferencing for
	//@@     the entire request batch and can perform inferencing for multiple
	//@@     requests if dynamic batching is enabled.
	//@@
	ModelExecutionCount uint64 `protobuf:"varint,3,opt,name=model_execution_count,json=modelExecutionCount,proto3" json:"model_execution_count,omitempty"`
	//@@  .. cpp:var:: uint64 model_inference_count
	//@@
	//@@     Cumulative number of model inferences performed for the
	//@@     model. Each inference in a batched request is counted as
	//@@     an individual inference.
	//@@
	ModelInferenceCount uint64 `protobuf:"varint,4,opt,name=model_inference_count,json=modelInferenceCount,proto3" json:"model_inference_count,omitempty"`
	//@@  .. cpp:var:: uint64 last_inference_timestamp_milliseconds
	//@@
	//@@     The timestamp of the last inference request made for this model,
	//@@     given as milliseconds since the epoch.
	//@@
	LastInferenceTimestampMilliseconds uint64 `protobuf:"varint,6,opt,name=last_inference_timestamp_milliseconds,json=lastInferenceTimestampMilliseconds,proto3" json:"last_inference_timestamp_milliseconds,omitempty"`
}

func (x *ModelVersionStatus) Reset() {
	*x = ModelVersionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionStatus) ProtoMessage() {}

func (x *ModelVersionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionStatus.ProtoReflect.Descriptor instead.
func (*ModelVersionStatus) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{8}
}

func (x *ModelVersionStatus) GetReadyState() ModelReadyState {
	if x != nil {
		return x.ReadyState
	}
	return ModelReadyState_MODEL_UNKNOWN
}

func (x *ModelVersionStatus) GetReadyStateReason() *ModelReadyStateReason {
	if x != nil {
		return x.ReadyStateReason
	}
	return nil
}

func (x *ModelVersionStatus) GetInferStats() map[uint32]*InferRequestStats {
	if x != nil {
		return x.InferStats
	}
	return nil
}

func (x *ModelVersionStatus) GetModelExecutionCount() uint64 {
	if x != nil {
		return x.ModelExecutionCount
	}
	return 0
}

func (x *ModelVersionStatus) GetModelInferenceCount() uint64 {
	if x != nil {
		return x.ModelInferenceCount
	}
	return 0
}

func (x *ModelVersionStatus) GetLastInferenceTimestampMilliseconds() uint64 {
	if x != nil {
		return x.LastInferenceTimestampMilliseconds
	}
	return 0
}

//@@
//@@.. cpp:var:: message ModelStatus
//@@
//@@   Status for a model.
//@@
type ModelStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: ModelConfig config
	//@@
	//@@     The configuration for the model.
	//@@
	Config *ModelConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	//@@  .. cpp:var:: map<int64, ModelVersionStatus> version_status
	//@@
	//@@     Duration statistics for each version of the model, as a map
	//@@     from version to the status. A version will not occur in the map
	//@@     unless there has been at least one inference request of
	//@@     that model version. A version of -1 indicates the status is
	//@@     for requests for which the version could not be determined.
	//@@
	VersionStatus map[int64]*ModelVersionStatus `protobuf:"bytes,2,rep,name=version_status,json=versionStatus,proto3" json:"version_status,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModelStatus) Reset() {
	*x = ModelStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelStatus) ProtoMessage() {}

func (x *ModelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelStatus.ProtoReflect.Descriptor instead.
func (*ModelStatus) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{9}
}

func (x *ModelStatus) GetConfig() *ModelConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ModelStatus) GetVersionStatus() map[int64]*ModelVersionStatus {
	if x != nil {
		return x.VersionStatus
	}
	return nil
}

//@@.. cpp:var:: message SharedMemoryRegion
//@@
//@@   The meta-data for the shared memory region registered in the inference
//@@   server.
//@@
type SharedMemoryRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name for this shared memory region.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@  .. cpp:var:: oneof shared_memory_types
	//@@
	//@@     Types of shared memory identifiers
	//@@
	//
	// Types that are assignable to SharedMemoryTypes:
	//	*SharedMemoryRegion_SystemSharedMemory_
	//	*SharedMemoryRegion_CudaSharedMemory_
	SharedMemoryTypes isSharedMemoryRegion_SharedMemoryTypes `protobuf_oneof:"shared_memory_types"`
	//@@  .. cpp:var:: uint64 byte_size
	//@@
	//@@     Size of the shared memory block, in bytes.
	//@@
	ByteSize uint64 `protobuf:"varint,5,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
}

func (x *SharedMemoryRegion) Reset() {
	*x = SharedMemoryRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryRegion) ProtoMessage() {}

func (x *SharedMemoryRegion) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryRegion.ProtoReflect.Descriptor instead.
func (*SharedMemoryRegion) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{10}
}

func (x *SharedMemoryRegion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *SharedMemoryRegion) GetSharedMemoryTypes() isSharedMemoryRegion_SharedMemoryTypes {
	if m != nil {
		return m.SharedMemoryTypes
	}
	return nil
}

func (x *SharedMemoryRegion) GetSystemSharedMemory() *SharedMemoryRegion_SystemSharedMemory {
	if x, ok := x.GetSharedMemoryTypes().(*SharedMemoryRegion_SystemSharedMemory_); ok {
		return x.SystemSharedMemory
	}
	return nil
}

func (x *SharedMemoryRegion) GetCudaSharedMemory() *SharedMemoryRegion_CudaSharedMemory {
	if x, ok := x.GetSharedMemoryTypes().(*SharedMemoryRegion_CudaSharedMemory_); ok {
		return x.CudaSharedMemory
	}
	return nil
}

func (x *SharedMemoryRegion) GetByteSize() uint64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

type isSharedMemoryRegion_SharedMemoryTypes interface {
	isSharedMemoryRegion_SharedMemoryTypes()
}

type SharedMemoryRegion_SystemSharedMemory_ struct {
	//@@
	//@@  .. cpp:var:: SystemSharedMemory system_shared_memory
	//@@
	//@@     The status of this system shared memory region.
	//@@
	SystemSharedMemory *SharedMemoryRegion_SystemSharedMemory `protobuf:"bytes,2,opt,name=system_shared_memory,json=systemSharedMemory,proto3,oneof"`
}

type SharedMemoryRegion_CudaSharedMemory_ struct {
	//@@
	//@@  .. cpp:var:: CudaSharedMemory cuda_shared_memory
	//@@
	//@@     The status of this CUDA shared memory region.
	//@@
	CudaSharedMemory *SharedMemoryRegion_CudaSharedMemory `protobuf:"bytes,3,opt,name=cuda_shared_memory,json=cudaSharedMemory,proto3,oneof"`
}

func (*SharedMemoryRegion_SystemSharedMemory_) isSharedMemoryRegion_SharedMemoryTypes() {}

func (*SharedMemoryRegion_CudaSharedMemory_) isSharedMemoryRegion_SharedMemoryTypes() {}

//@@
//@@.. cpp:var:: message ServerStatus
//@@
//@@   Status for the inference server.
//@@
type ServerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string id
	//@@
	//@@     The server's ID.
	//@@
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//@@  .. cpp:var:: string version
	//@@
	//@@     The server's version.
	//@@
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	//@@  .. cpp:var:: ServerReadyState ready_state
	//@@
	//@@     Current readiness state for the server.
	//@@
	ReadyState ServerReadyState `protobuf:"varint,7,opt,name=ready_state,json=readyState,proto3,enum=nvidia.inferenceserver.ServerReadyState" json:"ready_state,omitempty"`
	//@@  .. cpp:var:: uint64 uptime_ns
	//@@
	//@@     Server uptime in nanoseconds.
	//@@
	UptimeNs uint64 `protobuf:"varint,3,opt,name=uptime_ns,json=uptimeNs,proto3" json:"uptime_ns,omitempty"`
	//@@  .. cpp:var:: map<string, ModelStatus> model_status
	//@@
	//@@     Status for each model, as a map from model name to the
	//@@     status.
	//@@
	ModelStatus map[string]*ModelStatus `protobuf:"bytes,4,rep,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@@  .. cpp:var:: StatusRequestStats status_stats
	//@@
	//@@     Statistics for Status requests.
	//@@
	StatusStats *StatusRequestStats `protobuf:"bytes,5,opt,name=status_stats,json=statusStats,proto3" json:"status_stats,omitempty"`
	//@@  .. cpp:var:: HealthRequestStats health_stats
	//@@
	//@@     Statistics for Health requests.
	//@@
	HealthStats *HealthRequestStats `protobuf:"bytes,8,opt,name=health_stats,json=healthStats,proto3" json:"health_stats,omitempty"`
	//@@  .. cpp:var:: ModelControlRequestStats model_control_stats
	//@@
	//@@     Statistics for ModelControl requests.
	//@@
	ModelControlStats *ModelControlRequestStats `protobuf:"bytes,9,opt,name=model_control_stats,json=modelControlStats,proto3" json:"model_control_stats,omitempty"`
	//@@  .. cpp:var:: SharedMemoryControlRequestStats shm_control_stats
	//@@
	//@@     [DEPRECATED] Statistics for SharedMemoryControl requests.
	//@@
	ShmControlStats *SharedMemoryControlRequestStats `protobuf:"bytes,10,opt,name=shm_control_stats,json=shmControlStats,proto3" json:"shm_control_stats,omitempty"`
	//@@  .. cpp:var:: RepositoryRequestStats repository_stats
	//@@
	//@@     Statistics for Repository requests.
	//@@
	RepositoryStats *RepositoryRequestStats `protobuf:"bytes,11,opt,name=repository_stats,json=repositoryStats,proto3" json:"repository_stats,omitempty"`
}

func (x *ServerStatus) Reset() {
	*x = ServerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatus) ProtoMessage() {}

func (x *ServerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatus.ProtoReflect.Descriptor instead.
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{11}
}

func (x *ServerStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerStatus) GetReadyState() ServerReadyState {
	if x != nil {
		return x.ReadyState
	}
	return ServerReadyState_SERVER_INVALID
}

func (x *ServerStatus) GetUptimeNs() uint64 {
	if x != nil {
		return x.UptimeNs
	}
	return 0
}

func (x *ServerStatus) GetModelStatus() map[string]*ModelStatus {
	if x != nil {
		return x.ModelStatus
	}
	return nil
}

func (x *ServerStatus) GetStatusStats() *StatusRequestStats {
	if x != nil {
		return x.StatusStats
	}
	return nil
}

func (x *ServerStatus) GetHealthStats() *HealthRequestStats {
	if x != nil {
		return x.HealthStats
	}
	return nil
}

func (x *ServerStatus) GetModelControlStats() *ModelControlRequestStats {
	if x != nil {
		return x.ModelControlStats
	}
	return nil
}

func (x *ServerStatus) GetShmControlStats() *SharedMemoryControlRequestStats {
	if x != nil {
		return x.ShmControlStats
	}
	return nil
}

func (x *ServerStatus) GetRepositoryStats() *RepositoryRequestStats {
	if x != nil {
		return x.RepositoryStats
	}
	return nil
}

//@@
//@@.. cpp:var:: message SharedMemoryStatus
//@@
//@@   Shared memory status for the inference server.
//@@
type SharedMemoryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: SharedMemoryRegion shared_memory_region (repeated)
	//@@
	//@@     The list of active/registered shared memory regions.
	//@@
	SharedMemoryRegion []*SharedMemoryRegion `protobuf:"bytes,2,rep,name=shared_memory_region,json=sharedMemoryRegion,proto3" json:"shared_memory_region,omitempty"`
}

func (x *SharedMemoryStatus) Reset() {
	*x = SharedMemoryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryStatus) ProtoMessage() {}

func (x *SharedMemoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryStatus.ProtoReflect.Descriptor instead.
func (*SharedMemoryStatus) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{12}
}

func (x *SharedMemoryStatus) GetSharedMemoryRegion() []*SharedMemoryRegion {
	if x != nil {
		return x.SharedMemoryRegion
	}
	return nil
}

//@@
//@@.. cpp:var:: message ModelRepositoryIndex
//@@
//@@   Index of the model repository monitored by the inference server.
//@@
type ModelRepositoryIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: ModelEntry models (repeated)
	//@@
	//@@     The list of models in the model repository.
	//@@
	Models []*ModelRepositoryIndex_ModelEntry `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *ModelRepositoryIndex) Reset() {
	*x = ModelRepositoryIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelRepositoryIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRepositoryIndex) ProtoMessage() {}

func (x *ModelRepositoryIndex) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRepositoryIndex.ProtoReflect.Descriptor instead.
func (*ModelRepositoryIndex) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{13}
}

func (x *ModelRepositoryIndex) GetModels() []*ModelRepositoryIndex_ModelEntry {
	if x != nil {
		return x.Models
	}
	return nil
}

type SharedMemoryRegion_SystemSharedMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string shared_memory_key
	//@@
	//@@     The name of the shared memory region that holds the input data
	//@@     (or where the output data should be written).
	//@@
	SharedMemoryKey string `protobuf:"bytes,1,opt,name=shared_memory_key,json=sharedMemoryKey,proto3" json:"shared_memory_key,omitempty"`
	//@@  .. cpp:var:: uint64 offset
	//@@
	//@@     This is the offset of the shared memory block from the start
	//@@     of the shared memory region.
	//@@     start = offset, end = offset + byte_size;
	//@@
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SharedMemoryRegion_SystemSharedMemory) Reset() {
	*x = SharedMemoryRegion_SystemSharedMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryRegion_SystemSharedMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryRegion_SystemSharedMemory) ProtoMessage() {}

func (x *SharedMemoryRegion_SystemSharedMemory) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryRegion_SystemSharedMemory.ProtoReflect.Descriptor instead.
func (*SharedMemoryRegion_SystemSharedMemory) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{10, 0}
}

func (x *SharedMemoryRegion_SystemSharedMemory) GetSharedMemoryKey() string {
	if x != nil {
		return x.SharedMemoryKey
	}
	return ""
}

func (x *SharedMemoryRegion_SystemSharedMemory) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SharedMemoryRegion_CudaSharedMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: int64 device_id
	//@@
	//@@     The GPU device ID on which the cudaIPC handle was created.
	//@@
	DeviceId int64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *SharedMemoryRegion_CudaSharedMemory) Reset() {
	*x = SharedMemoryRegion_CudaSharedMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryRegion_CudaSharedMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryRegion_CudaSharedMemory) ProtoMessage() {}

func (x *SharedMemoryRegion_CudaSharedMemory) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryRegion_CudaSharedMemory.ProtoReflect.Descriptor instead.
func (*SharedMemoryRegion_CudaSharedMemory) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{10, 1}
}

func (x *SharedMemoryRegion_CudaSharedMemory) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

//@@
//@@  .. cpp:var:: message ModelEntry
//@@
//@@     The basic information for a model.
//@@
type ModelRepositoryIndex_ModelEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@    .. cpp:var:: string name
	//@@
	//@@       The model's name.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ModelRepositoryIndex_ModelEntry) Reset() {
	*x = ModelRepositoryIndex_ModelEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_status_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelRepositoryIndex_ModelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRepositoryIndex_ModelEntry) ProtoMessage() {}

func (x *ModelRepositoryIndex_ModelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_server_status_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRepositoryIndex_ModelEntry.ProtoReflect.Descriptor instead.
func (*ModelRepositoryIndex_ModelEntry) Descriptor() ([]byte, []int) {
	return file_server_status_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ModelRepositoryIndex_ModelEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_server_status_proto protoreflect.FileDescriptor

var file_server_status_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x12, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x48, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x22, 0x54, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x54, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5a, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x1f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x58, 0x0a, 0x16, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xf0, 0x03, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x31, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x04, 0x0a, 0x12, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x48, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x25, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x22, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x1a, 0x68, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x02, 0x0a, 0x0b, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x6c, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x03, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x71, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x6b, 0x0a, 0x12, 0x63, 0x75, 0x64, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x58, 0x0a, 0x12,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x2f, 0x0a, 0x10, 0x43, 0x75, 0x64, 0x61, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x9f,
	0x06, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x4e,
	0x73, 0x12, 0x58, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x73,
	0x68, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0f, 0x73, 0x68, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x59, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x63, 0x0a, 0x10, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x72, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4f, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x20,
	0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x2a, 0x74, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x86, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x0a, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_status_proto_rawDescOnce sync.Once
	file_server_status_proto_rawDescData = file_server_status_proto_rawDesc
)

func file_server_status_proto_rawDescGZIP() []byte {
	file_server_status_proto_rawDescOnce.Do(func() {
		file_server_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_status_proto_rawDescData)
	})
	return file_server_status_proto_rawDescData
}

var file_server_status_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_server_status_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_server_status_proto_goTypes = []interface{}{
	(ModelReadyState)(0),                          // 0: nvidia.inferenceserver.ModelReadyState
	(ServerReadyState)(0),                         // 1: nvidia.inferenceserver.ServerReadyState
	(*StatDuration)(nil),                          // 2: nvidia.inferenceserver.StatDuration
	(*StatusRequestStats)(nil),                    // 3: nvidia.inferenceserver.StatusRequestStats
	(*HealthRequestStats)(nil),                    // 4: nvidia.inferenceserver.HealthRequestStats
	(*ModelControlRequestStats)(nil),              // 5: nvidia.inferenceserver.ModelControlRequestStats
	(*SharedMemoryControlRequestStats)(nil),       // 6: nvidia.inferenceserver.SharedMemoryControlRequestStats
	(*RepositoryRequestStats)(nil),                // 7: nvidia.inferenceserver.RepositoryRequestStats
	(*InferRequestStats)(nil),                     // 8: nvidia.inferenceserver.InferRequestStats
	(*ModelReadyStateReason)(nil),                 // 9: nvidia.inferenceserver.ModelReadyStateReason
	(*ModelVersionStatus)(nil),                    // 10: nvidia.inferenceserver.ModelVersionStatus
	(*ModelStatus)(nil),                           // 11: nvidia.inferenceserver.ModelStatus
	(*SharedMemoryRegion)(nil),                    // 12: nvidia.inferenceserver.SharedMemoryRegion
	(*ServerStatus)(nil),                          // 13: nvidia.inferenceserver.ServerStatus
	(*SharedMemoryStatus)(nil),                    // 14: nvidia.inferenceserver.SharedMemoryStatus
	(*ModelRepositoryIndex)(nil),                  // 15: nvidia.inferenceserver.ModelRepositoryIndex
	nil,                                           // 16: nvidia.inferenceserver.ModelVersionStatus.InferStatsEntry
	nil,                                           // 17: nvidia.inferenceserver.ModelStatus.VersionStatusEntry
	(*SharedMemoryRegion_SystemSharedMemory)(nil), // 18: nvidia.inferenceserver.SharedMemoryRegion.SystemSharedMemory
	(*SharedMemoryRegion_CudaSharedMemory)(nil),   // 19: nvidia.inferenceserver.SharedMemoryRegion.CudaSharedMemory
	nil,                                     // 20: nvidia.inferenceserver.ServerStatus.ModelStatusEntry
	(*ModelRepositoryIndex_ModelEntry)(nil), // 21: nvidia.inferenceserver.ModelRepositoryIndex.ModelEntry
	(*ModelConfig)(nil),                     // 22: nvidia.inferenceserver.ModelConfig
}
var file_server_status_proto_depIdxs = []int32{
	2,  // 0: nvidia.inferenceserver.StatusRequestStats.success:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 1: nvidia.inferenceserver.HealthRequestStats.success:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 2: nvidia.inferenceserver.ModelControlRequestStats.success:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 3: nvidia.inferenceserver.SharedMemoryControlRequestStats.success:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 4: nvidia.inferenceserver.RepositoryRequestStats.success:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 5: nvidia.inferenceserver.InferRequestStats.success:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 6: nvidia.inferenceserver.InferRequestStats.failed:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 7: nvidia.inferenceserver.InferRequestStats.compute:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 8: nvidia.inferenceserver.InferRequestStats.queue:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 9: nvidia.inferenceserver.InferRequestStats.compute_input:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 10: nvidia.inferenceserver.InferRequestStats.compute_infer:type_name -> nvidia.inferenceserver.StatDuration
	2,  // 11: nvidia.inferenceserver.InferRequestStats.compute_output:type_name -> nvidia.inferenceserver.StatDuration
	0,  // 12: nvidia.inferenceserver.ModelVersionStatus.ready_state:type_name -> nvidia.inferenceserver.ModelReadyState
	9,  // 13: nvidia.inferenceserver.ModelVersionStatus.ready_state_reason:type_name -> nvidia.inferenceserver.ModelReadyStateReason
	16, // 14: nvidia.inferenceserver.ModelVersionStatus.infer_stats:type_name -> nvidia.inferenceserver.ModelVersionStatus.InferStatsEntry
	22, // 15: nvidia.inferenceserver.ModelStatus.config:type_name -> nvidia.inferenceserver.ModelConfig
	17, // 16: nvidia.inferenceserver.ModelStatus.version_status:type_name -> nvidia.inferenceserver.ModelStatus.VersionStatusEntry
	18, // 17: nvidia.inferenceserver.SharedMemoryRegion.system_shared_memory:type_name -> nvidia.inferenceserver.SharedMemoryRegion.SystemSharedMemory
	19, // 18: nvidia.inferenceserver.SharedMemoryRegion.cuda_shared_memory:type_name -> nvidia.inferenceserver.SharedMemoryRegion.CudaSharedMemory
	1,  // 19: nvidia.inferenceserver.ServerStatus.ready_state:type_name -> nvidia.inferenceserver.ServerReadyState
	20, // 20: nvidia.inferenceserver.ServerStatus.model_status:type_name -> nvidia.inferenceserver.ServerStatus.ModelStatusEntry
	3,  // 21: nvidia.inferenceserver.ServerStatus.status_stats:type_name -> nvidia.inferenceserver.StatusRequestStats
	4,  // 22: nvidia.inferenceserver.ServerStatus.health_stats:type_name -> nvidia.inferenceserver.HealthRequestStats
	5,  // 23: nvidia.inferenceserver.ServerStatus.model_control_stats:type_name -> nvidia.inferenceserver.ModelControlRequestStats
	6,  // 24: nvidia.inferenceserver.ServerStatus.shm_control_stats:type_name -> nvidia.inferenceserver.SharedMemoryControlRequestStats
	7,  // 25: nvidia.inferenceserver.ServerStatus.repository_stats:type_name -> nvidia.inferenceserver.RepositoryRequestStats
	12, // 26: nvidia.inferenceserver.SharedMemoryStatus.shared_memory_region:type_name -> nvidia.inferenceserver.SharedMemoryRegion
	21, // 27: nvidia.inferenceserver.ModelRepositoryIndex.models:type_name -> nvidia.inferenceserver.ModelRepositoryIndex.ModelEntry
	8,  // 28: nvidia.inferenceserver.ModelVersionStatus.InferStatsEntry.value:type_name -> nvidia.inferenceserver.InferRequestStats
	10, // 29: nvidia.inferenceserver.ModelStatus.VersionStatusEntry.value:type_name -> nvidia.inferenceserver.ModelVersionStatus
	11, // 30: nvidia.inferenceserver.ServerStatus.ModelStatusEntry.value:type_name -> nvidia.inferenceserver.ModelStatus
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_server_status_proto_init() }
func file_server_status_proto_init() {
	if File_server_status_proto != nil {
		return
	}
	file_model_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_server_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequestStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequestStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelControlRequestStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlRequestStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryRequestStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferRequestStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelReadyStateReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelRepositoryIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryRegion_SystemSharedMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryRegion_CudaSharedMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_status_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelRepositoryIndex_ModelEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_status_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SharedMemoryRegion_SystemSharedMemory_)(nil),
		(*SharedMemoryRegion_CudaSharedMemory_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_status_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_status_proto_goTypes,
		DependencyIndexes: file_server_status_proto_depIdxs,
		EnumInfos:         file_server_status_proto_enumTypes,
		MessageInfos:      file_server_status_proto_msgTypes,
	}.Build()
	File_server_status_proto = out.File
	file_server_status_proto_rawDesc = nil
	file_server_status_proto_goTypes = nil
	file_server_status_proto_depIdxs = nil
}
