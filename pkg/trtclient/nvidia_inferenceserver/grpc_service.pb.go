// Copyright (c) 2018-2019, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        (unknown)
// source: grpc_service.proto

package nvidia_inferenceserver

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//@@  .. cpp:enum:: Type
//@@
//@@     Types of control operation
//@@
type ModelControlRequest_Type int32

const (
	//@@    .. cpp:enumerator:: Type::UNLOAD = 0
	//@@
	//@@       To unload the specified model.
	//@@
	ModelControlRequest_UNLOAD ModelControlRequest_Type = 0
	//@@    .. cpp:enumerator:: Type::LOAD = 1
	//@@
	//@@       To load the specified model. If the model has been loaded,
	//@@       it will be reloaded to fetch the latest change.
	//@@
	ModelControlRequest_LOAD ModelControlRequest_Type = 1
)

// Enum value maps for ModelControlRequest_Type.
var (
	ModelControlRequest_Type_name = map[int32]string{
		0: "UNLOAD",
		1: "LOAD",
	}
	ModelControlRequest_Type_value = map[string]int32{
		"UNLOAD": 0,
		"LOAD":   1,
	}
)

func (x ModelControlRequest_Type) Enum() *ModelControlRequest_Type {
	p := new(ModelControlRequest_Type)
	*p = x
	return p
}

func (x ModelControlRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelControlRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_service_proto_enumTypes[0].Descriptor()
}

func (ModelControlRequest_Type) Type() protoreflect.EnumType {
	return &file_grpc_service_proto_enumTypes[0]
}

func (x ModelControlRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelControlRequest_Type.Descriptor instead.
func (ModelControlRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{4, 0}
}

//@@
//@@.. cpp:var:: message StatusRequest
//@@
//@@   Request message for Status gRPC endpoint.
//@@
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string model_name
	//@@
	//@@     The specific model status to be returned. If empty return status
	//@@     for all models.
	//@@
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{0}
}

func (x *StatusRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

//@@
//@@.. cpp:var:: message StatusResponse
//@@
//@@   Response message for Status gRPC endpoint.
//@@
type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: RequestStatus request_status
	//@@
	//@@     The status of the request, indicating success or failure.
	//@@
	RequestStatus *RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
	//@@
	//@@  .. cpp:var:: ServerStatus server_status
	//@@
	//@@     The server and model status.
	//@@
	ServerStatus *ServerStatus `protobuf:"bytes,2,opt,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *StatusResponse) GetRequestStatus() *RequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return nil
}

func (x *StatusResponse) GetServerStatus() *ServerStatus {
	if x != nil {
		return x.ServerStatus
	}
	return nil
}

//@@
//@@.. cpp:var:: message HealthRequest
//@@
//@@   Request message for Health gRPC endpoint.
//@@
type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string mode
	//@@
	//@@     The requested health action: 'live' requests the liveness
	//@@     state of the inference server; 'ready' requests the readiness state
	//@@     of the inference server.
	//@@
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *HealthRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

//@@
//@@.. cpp:var:: message HealthResponse
//@@
//@@   Response message for Health gRPC endpoint.
//@@
type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: RequestStatus request_status
	//@@
	//@@     The status of the request, indicating success or failure.
	//@@
	RequestStatus *RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
	//@@
	//@@  .. cpp:var:: bool health
	//@@
	//@@     The result of the request. True indicates the inference server is
	//@@     live/ready, false indicates the inference server is not live/ready.
	//@@
	Health bool `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *HealthResponse) GetRequestStatus() *RequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return nil
}

func (x *HealthResponse) GetHealth() bool {
	if x != nil {
		return x.Health
	}
	return false
}

//@@
//@@.. cpp:var:: message ModelControlRequest
//@@
//@@   Request message for ModelControl gRPC endpoint.
//@@
type ModelControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string model_name
	//@@
	//@@     The target model name.
	//@@
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	//@@
	//@@  .. cpp:var:: Type type
	//@@
	//@@     The control type that is operated on the specified model.
	//@@
	Type ModelControlRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=nvidia.inferenceserver.ModelControlRequest_Type" json:"type,omitempty"`
}

func (x *ModelControlRequest) Reset() {
	*x = ModelControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelControlRequest) ProtoMessage() {}

func (x *ModelControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelControlRequest.ProtoReflect.Descriptor instead.
func (*ModelControlRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{4}
}

func (x *ModelControlRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelControlRequest) GetType() ModelControlRequest_Type {
	if x != nil {
		return x.Type
	}
	return ModelControlRequest_UNLOAD
}

//@@
//@@.. cpp:var:: message ModelControlResponse
//@@
//@@   Response message for ModelControl gRPC endpoint.
//@@
type ModelControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: RequestStatus request_status
	//@@
	//@@     The status of the request, indicating success or failure.
	//@@
	RequestStatus *RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (x *ModelControlResponse) Reset() {
	*x = ModelControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelControlResponse) ProtoMessage() {}

func (x *ModelControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelControlResponse.ProtoReflect.Descriptor instead.
func (*ModelControlResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{5}
}

func (x *ModelControlResponse) GetRequestStatus() *RequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return nil
}

//@@
//@@.. cpp:var:: message SharedMemoryControlRequest
//@@
//@@   Request message for managing registered shared memory regions in TRTIS.
//@@
type SharedMemoryControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: oneof shared_memory_control
	//@@
	//@@     Types of control operations for shared memory
	//@@
	//
	// Types that are assignable to SharedMemoryControl:
	//	*SharedMemoryControlRequest_Register_
	//	*SharedMemoryControlRequest_Unregister_
	//	*SharedMemoryControlRequest_UnregisterAll_
	//	*SharedMemoryControlRequest_Status_
	SharedMemoryControl isSharedMemoryControlRequest_SharedMemoryControl `protobuf_oneof:"shared_memory_control"`
}

func (x *SharedMemoryControlRequest) Reset() {
	*x = SharedMemoryControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlRequest) ProtoMessage() {}

func (x *SharedMemoryControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlRequest.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{6}
}

func (m *SharedMemoryControlRequest) GetSharedMemoryControl() isSharedMemoryControlRequest_SharedMemoryControl {
	if m != nil {
		return m.SharedMemoryControl
	}
	return nil
}

func (x *SharedMemoryControlRequest) GetRegister() *SharedMemoryControlRequest_Register {
	if x, ok := x.GetSharedMemoryControl().(*SharedMemoryControlRequest_Register_); ok {
		return x.Register
	}
	return nil
}

func (x *SharedMemoryControlRequest) GetUnregister() *SharedMemoryControlRequest_Unregister {
	if x, ok := x.GetSharedMemoryControl().(*SharedMemoryControlRequest_Unregister_); ok {
		return x.Unregister
	}
	return nil
}

func (x *SharedMemoryControlRequest) GetUnregisterAll() *SharedMemoryControlRequest_UnregisterAll {
	if x, ok := x.GetSharedMemoryControl().(*SharedMemoryControlRequest_UnregisterAll_); ok {
		return x.UnregisterAll
	}
	return nil
}

func (x *SharedMemoryControlRequest) GetStatus() *SharedMemoryControlRequest_Status {
	if x, ok := x.GetSharedMemoryControl().(*SharedMemoryControlRequest_Status_); ok {
		return x.Status
	}
	return nil
}

type isSharedMemoryControlRequest_SharedMemoryControl interface {
	isSharedMemoryControlRequest_SharedMemoryControl()
}

type SharedMemoryControlRequest_Register_ struct {
	//@@    .. cpp:var:: Register register
	//@@
	//@@       To register the specified shared memory region.
	//@@
	Register *SharedMemoryControlRequest_Register `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type SharedMemoryControlRequest_Unregister_ struct {
	//@@    .. cpp:var:: Unregister unregister
	//@@
	//@@       To unregister the specified shared memory region.
	//@@
	Unregister *SharedMemoryControlRequest_Unregister `protobuf:"bytes,2,opt,name=unregister,proto3,oneof"`
}

type SharedMemoryControlRequest_UnregisterAll_ struct {
	//@@    .. cpp:var:: UnregisterAll unregister_all
	//@@
	//@@       To unregister all active shared memory regions.
	//@@
	UnregisterAll *SharedMemoryControlRequest_UnregisterAll `protobuf:"bytes,3,opt,name=unregister_all,json=unregisterAll,proto3,oneof"`
}

type SharedMemoryControlRequest_Status_ struct {
	//@@    .. cpp:var:: Status status
	//@@
	//@@       Get the status of all active shared memory regions.
	//@@
	Status *SharedMemoryControlRequest_Status `protobuf:"bytes,4,opt,name=status,proto3,oneof"`
}

func (*SharedMemoryControlRequest_Register_) isSharedMemoryControlRequest_SharedMemoryControl() {}

func (*SharedMemoryControlRequest_Unregister_) isSharedMemoryControlRequest_SharedMemoryControl() {}

func (*SharedMemoryControlRequest_UnregisterAll_) isSharedMemoryControlRequest_SharedMemoryControl() {
}

func (*SharedMemoryControlRequest_Status_) isSharedMemoryControlRequest_SharedMemoryControl() {}

//@@
//@@.. cpp:var:: message SharedMemoryControlResponse
//@@
//@@   Response message for SharedMemoryControl gRPC endpoint.
//@@
type SharedMemoryControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: RequestStatus request_status
	//@@
	//@@     The status of the request, indicating success or failure.
	//@@
	RequestStatus *RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
	// Types that are assignable to SharedMemoryControl:
	//	*SharedMemoryControlResponse_SharedMemoryStatus
	SharedMemoryControl isSharedMemoryControlResponse_SharedMemoryControl `protobuf_oneof:"shared_memory_control"`
}

func (x *SharedMemoryControlResponse) Reset() {
	*x = SharedMemoryControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlResponse) ProtoMessage() {}

func (x *SharedMemoryControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlResponse.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{7}
}

func (x *SharedMemoryControlResponse) GetRequestStatus() *RequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return nil
}

func (m *SharedMemoryControlResponse) GetSharedMemoryControl() isSharedMemoryControlResponse_SharedMemoryControl {
	if m != nil {
		return m.SharedMemoryControl
	}
	return nil
}

func (x *SharedMemoryControlResponse) GetSharedMemoryStatus() *SharedMemoryControlResponse_Status {
	if x, ok := x.GetSharedMemoryControl().(*SharedMemoryControlResponse_SharedMemoryStatus); ok {
		return x.SharedMemoryStatus
	}
	return nil
}

type isSharedMemoryControlResponse_SharedMemoryControl interface {
	isSharedMemoryControlResponse_SharedMemoryControl()
}

type SharedMemoryControlResponse_SharedMemoryStatus struct {
	//@@
	//@@  .. cpp:var:: Status shared_memory_status
	//@@
	//@@     The status of all active shared memory regions.
	//@@
	SharedMemoryStatus *SharedMemoryControlResponse_Status `protobuf:"bytes,2,opt,name=shared_memory_status,json=sharedMemoryStatus,proto3,oneof"`
}

func (*SharedMemoryControlResponse_SharedMemoryStatus) isSharedMemoryControlResponse_SharedMemoryControl() {
}

//@@
//@@.. cpp:var:: message InferRequest
//@@
//@@   Request message for Infer gRPC endpoint.
//@@
type InferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string model_name
	//@@
	//@@     The name of the model to use for inferencing.
	//@@
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	//@@  .. cpp:var:: int64 version
	//@@
	//@@     The version of the model to use for inference. If -1
	//@@     the latest/most-recent version of the model is used.
	//@@
	ModelVersion int64 `protobuf:"varint,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	//@@  .. cpp:var:: InferRequestHeader meta_data
	//@@
	//@@     Meta-data for the request: input tensors, output
	//@@     tensors, etc.
	//@@
	MetaData *InferRequestHeader `protobuf:"bytes,3,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	//@@  .. cpp:var:: bytes raw_input (repeated)
	//@@
	//@@     The raw input tensor data in the order specified in 'meta_data'.
	//@@
	RawInput [][]byte `protobuf:"bytes,4,rep,name=raw_input,json=rawInput,proto3" json:"raw_input,omitempty"`
}

func (x *InferRequest) Reset() {
	*x = InferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferRequest) ProtoMessage() {}

func (x *InferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferRequest.ProtoReflect.Descriptor instead.
func (*InferRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{8}
}

func (x *InferRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *InferRequest) GetModelVersion() int64 {
	if x != nil {
		return x.ModelVersion
	}
	return 0
}

func (x *InferRequest) GetMetaData() *InferRequestHeader {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *InferRequest) GetRawInput() [][]byte {
	if x != nil {
		return x.RawInput
	}
	return nil
}

//@@
//@@.. cpp:var:: message InferResponse
//@@
//@@   Response message for Infer gRPC endpoint.
//@@
type InferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: RequestStatus request_status
	//@@
	//@@     The status of the request, indicating success or failure.
	//@@
	RequestStatus *RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
	//@@  .. cpp:var:: InferResponseHeader meta_data
	//@@
	//@@     The response meta-data for the output tensors.
	//@@
	MetaData *InferResponseHeader `protobuf:"bytes,2,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	//@@  .. cpp:var:: bytes raw_output (repeated)
	//@@
	//@@     The raw output tensor data in the order specified in 'meta_data'.
	//@@
	RawOutput [][]byte `protobuf:"bytes,3,rep,name=raw_output,json=rawOutput,proto3" json:"raw_output,omitempty"`
}

func (x *InferResponse) Reset() {
	*x = InferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferResponse) ProtoMessage() {}

func (x *InferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferResponse.ProtoReflect.Descriptor instead.
func (*InferResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{9}
}

func (x *InferResponse) GetRequestStatus() *RequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return nil
}

func (x *InferResponse) GetMetaData() *InferResponseHeader {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *InferResponse) GetRawOutput() [][]byte {
	if x != nil {
		return x.RawOutput
	}
	return nil
}

//@@
//@@.. cpp:var:: message RepositoryRequest
//@@
//@@   Request message for Repository gRPC endpoint.
//@@
type RepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: oneof request_type
	//@@
	//@@     Types of the repository request
	//@@
	//
	// Types that are assignable to RequestType:
	//	*RepositoryRequest_Index
	RequestType isRepositoryRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *RepositoryRequest) Reset() {
	*x = RepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryRequest) ProtoMessage() {}

func (x *RepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryRequest.ProtoReflect.Descriptor instead.
func (*RepositoryRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{10}
}

func (m *RepositoryRequest) GetRequestType() isRepositoryRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *RepositoryRequest) GetIndex() bool {
	if x, ok := x.GetRequestType().(*RepositoryRequest_Index); ok {
		return x.Index
	}
	return false
}

type isRepositoryRequest_RequestType interface {
	isRepositoryRequest_RequestType()
}

type RepositoryRequest_Index struct {
	//@@
	//@@    .. cpp:var:: bool index
	//@@
	//@@       Request for the index of the model repository.
	//@@
	Index bool `protobuf:"varint,1,opt,name=index,proto3,oneof"`
}

func (*RepositoryRequest_Index) isRepositoryRequest_RequestType() {}

//@@
//@@.. cpp:var:: message RepositoryResponse
//@@
//@@   Response message for Repository gRPC endpoint.
//@@
type RepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: RequestStatus request_status
	//@@
	//@@     The status of the request, indicating success or failure.
	//@@
	RequestStatus *RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
	//@@  .. cpp:var:: oneof response_type
	//@@
	//@@     Types of the repository reponse, which is one-to-one mapping to
	//@@     the repository request type.
	//@@
	//
	// Types that are assignable to ResponseType:
	//	*RepositoryResponse_Index
	ResponseType isRepositoryResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *RepositoryResponse) Reset() {
	*x = RepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryResponse) ProtoMessage() {}

func (x *RepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryResponse.ProtoReflect.Descriptor instead.
func (*RepositoryResponse) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{11}
}

func (x *RepositoryResponse) GetRequestStatus() *RequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return nil
}

func (m *RepositoryResponse) GetResponseType() isRepositoryResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *RepositoryResponse) GetIndex() *ModelRepositoryIndex {
	if x, ok := x.GetResponseType().(*RepositoryResponse_Index); ok {
		return x.Index
	}
	return nil
}

type isRepositoryResponse_ResponseType interface {
	isRepositoryResponse_ResponseType()
}

type RepositoryResponse_Index struct {
	//@@
	//@@    .. cpp:var:: bool index
	//@@
	//@@       The index of the model repository.
	//@@
	Index *ModelRepositoryIndex `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

func (*RepositoryResponse_Index) isRepositoryResponse_ResponseType() {}

//@@  .. cpp:var:: message Register
//@@
//@@     Register a shared memory region.
//@@
type SharedMemoryControlRequest_Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name for this shared memory region.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//@@  .. cpp:var:: oneof shared_memory_types
	//@@
	//@@     Types of shared memory identifiers
	//@@
	//
	// Types that are assignable to SharedMemoryTypes:
	//	*SharedMemoryControlRequest_Register_SystemSharedMemory
	//	*SharedMemoryControlRequest_Register_CudaSharedMemory
	SharedMemoryTypes isSharedMemoryControlRequest_Register_SharedMemoryTypes `protobuf_oneof:"shared_memory_types"`
	//@@  .. cpp:var:: uint64 byte_size
	//@@
	//@@     Size of the shared memory block, in bytes.
	//@@
	ByteSize uint64 `protobuf:"varint,4,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
}

func (x *SharedMemoryControlRequest_Register) Reset() {
	*x = SharedMemoryControlRequest_Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlRequest_Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlRequest_Register) ProtoMessage() {}

func (x *SharedMemoryControlRequest_Register) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlRequest_Register.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlRequest_Register) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SharedMemoryControlRequest_Register) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *SharedMemoryControlRequest_Register) GetSharedMemoryTypes() isSharedMemoryControlRequest_Register_SharedMemoryTypes {
	if m != nil {
		return m.SharedMemoryTypes
	}
	return nil
}

func (x *SharedMemoryControlRequest_Register) GetSystemSharedMemory() *SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier {
	if x, ok := x.GetSharedMemoryTypes().(*SharedMemoryControlRequest_Register_SystemSharedMemory); ok {
		return x.SystemSharedMemory
	}
	return nil
}

func (x *SharedMemoryControlRequest_Register) GetCudaSharedMemory() *SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier {
	if x, ok := x.GetSharedMemoryTypes().(*SharedMemoryControlRequest_Register_CudaSharedMemory); ok {
		return x.CudaSharedMemory
	}
	return nil
}

func (x *SharedMemoryControlRequest_Register) GetByteSize() uint64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

type isSharedMemoryControlRequest_Register_SharedMemoryTypes interface {
	isSharedMemoryControlRequest_Register_SharedMemoryTypes()
}

type SharedMemoryControlRequest_Register_SystemSharedMemory struct {
	//@@
	//@@  .. cpp:var:: SystemSharedMemoryIdentifier system_shared_memory
	//@@
	//@@     The identifier for this system shared memory region.
	//@@
	SystemSharedMemory *SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier `protobuf:"bytes,2,opt,name=system_shared_memory,json=systemSharedMemory,proto3,oneof"`
}

type SharedMemoryControlRequest_Register_CudaSharedMemory struct {
	//@@
	//@@  .. cpp:var:: CUDASharedMemoryIdentifier cuda_shared_memory
	//@@
	//@@     The identifier for this CUDA shared memory region.
	//@@
	CudaSharedMemory *SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier `protobuf:"bytes,3,opt,name=cuda_shared_memory,json=cudaSharedMemory,proto3,oneof"`
}

func (*SharedMemoryControlRequest_Register_SystemSharedMemory) isSharedMemoryControlRequest_Register_SharedMemoryTypes() {
}

func (*SharedMemoryControlRequest_Register_CudaSharedMemory) isSharedMemoryControlRequest_Register_SharedMemoryTypes() {
}

//@@  .. cpp:var:: message Unregister
//@@
//@@     Unregister a specified shared memory region.
//@@
type SharedMemoryControlRequest_Unregister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: string name
	//@@
	//@@     The name for this shared memory region to unregister.
	//@@
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SharedMemoryControlRequest_Unregister) Reset() {
	*x = SharedMemoryControlRequest_Unregister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlRequest_Unregister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlRequest_Unregister) ProtoMessage() {}

func (x *SharedMemoryControlRequest_Unregister) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlRequest_Unregister.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlRequest_Unregister) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{6, 1}
}

func (x *SharedMemoryControlRequest_Unregister) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//@@  .. cpp:var:: message UnregisterAll
//@@
//@@     Unregister all shared memory regions.
//@@
type SharedMemoryControlRequest_UnregisterAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharedMemoryControlRequest_UnregisterAll) Reset() {
	*x = SharedMemoryControlRequest_UnregisterAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlRequest_UnregisterAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlRequest_UnregisterAll) ProtoMessage() {}

func (x *SharedMemoryControlRequest_UnregisterAll) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlRequest_UnregisterAll.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlRequest_UnregisterAll) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{6, 2}
}

//@@  .. cpp:var:: message GetStatus
//@@
//@@     Get the status of all active shared memory regions.
//@@
type SharedMemoryControlRequest_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharedMemoryControlRequest_Status) Reset() {
	*x = SharedMemoryControlRequest_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlRequest_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlRequest_Status) ProtoMessage() {}

func (x *SharedMemoryControlRequest_Status) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlRequest_Status.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlRequest_Status) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{6, 3}
}

//@@
//@@  .. cpp:var:: message SystemSharedMemoryIdentifier
//@@
//@@     The identifier for this system shared memory region.
//@@
type SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: string shared_memory_key
	//@@
	//@@     The name of the shared memory region that holds the input data
	//@@     (or where the output data should be written).
	//@@
	SharedMemoryKey string `protobuf:"bytes,1,opt,name=shared_memory_key,json=sharedMemoryKey,proto3" json:"shared_memory_key,omitempty"`
	//@@  .. cpp:var:: uint64 offset
	//@@
	//@@     This is the offset of the shared memory block from the start
	//@@     of the shared memory region.
	//@@     start = offset, end = offset + byte_size;
	//@@
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier) Reset() {
	*x = SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier) ProtoMessage() {}

func (x *SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier) GetSharedMemoryKey() string {
	if x != nil {
		return x.SharedMemoryKey
	}
	return ""
}

func (x *SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

//@@
//@@  .. cpp:var:: message CUDASharedMemoryIdentifier
//@@
//@@     The identifier for this system shared memory region.
//@@
type SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@  .. cpp:var:: bytes raw_handle
	//@@
	//@@     The raw serialized cudaIPC handle.
	//@@
	RawHandle []byte `protobuf:"bytes,1,opt,name=raw_handle,json=rawHandle,proto3" json:"raw_handle,omitempty"`
	//@@  .. cpp:var:: int64 device_id
	//@@
	//@@     The GPU device ID on which the cudaIPC handle was created.
	//@@
	DeviceId int64 `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier) Reset() {
	*x = SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier) ProtoMessage() {}

func (x *SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{6, 0, 1}
}

func (x *SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier) GetRawHandle() []byte {
	if x != nil {
		return x.RawHandle
	}
	return nil
}

func (x *SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

//@@
//@@.. cpp:var:: message Status
//@@
//@@   Status of all active shared memory regions.
//@@
type SharedMemoryControlResponse_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@@
	//@@  .. cpp:var:: SharedMemoryRegion shared_memory_region
	//@@
	//@@     The list of active/registered shared memory regions.
	//@@
	SharedMemoryRegion []*SharedMemoryRegion `protobuf:"bytes,1,rep,name=shared_memory_region,json=sharedMemoryRegion,proto3" json:"shared_memory_region,omitempty"`
}

func (x *SharedMemoryControlResponse_Status) Reset() {
	*x = SharedMemoryControlResponse_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedMemoryControlResponse_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedMemoryControlResponse_Status) ProtoMessage() {}

func (x *SharedMemoryControlResponse_Status) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedMemoryControlResponse_Status.ProtoReflect.Descriptor instead.
func (*SharedMemoryControlResponse_Status) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SharedMemoryControlResponse_Status) GetSharedMemoryRegion() []*SharedMemoryRegion {
	if x != nil {
		return x.SharedMemoryRegion
	}
	return nil
}

var File_grpc_service_proto protoreflect.FileDescriptor

var file_grpc_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x09, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x23,
	0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x98, 0x01, 0x0a, 0x13,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x22, 0x64, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x99, 0x08, 0x0a,
	0x1a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xa8, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x14, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x63, 0x75, 0x64, 0x61,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x55, 0x44, 0x41, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x75, 0x64, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x62, 0x0a,
	0x1c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x1a, 0x58, 0x0a, 0x1a, 0x43, 0x55, 0x44, 0x41, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x61, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x1a, 0x20, 0x0a, 0x0a, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0f, 0x0a, 0x0d, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x17, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xdc, 0x02, 0x0a, 0x1b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x66, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x5c, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x17,
	0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x09,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x61, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x61, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3b, 0x0a, 0x11, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x32, 0xd4, 0x05, 0x0a, 0x0b, 0x47, 0x52, 0x50, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x12, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2b, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x32, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_grpc_service_proto_rawDescOnce sync.Once
	file_grpc_service_proto_rawDescData = file_grpc_service_proto_rawDesc
)

func file_grpc_service_proto_rawDescGZIP() []byte {
	file_grpc_service_proto_rawDescOnce.Do(func() {
		file_grpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_service_proto_rawDescData)
	})
	return file_grpc_service_proto_rawDescData
}

var file_grpc_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_grpc_service_proto_goTypes = []interface{}{
	(ModelControlRequest_Type)(0),                    // 0: nvidia.inferenceserver.ModelControlRequest.Type
	(*StatusRequest)(nil),                            // 1: nvidia.inferenceserver.StatusRequest
	(*StatusResponse)(nil),                           // 2: nvidia.inferenceserver.StatusResponse
	(*HealthRequest)(nil),                            // 3: nvidia.inferenceserver.HealthRequest
	(*HealthResponse)(nil),                           // 4: nvidia.inferenceserver.HealthResponse
	(*ModelControlRequest)(nil),                      // 5: nvidia.inferenceserver.ModelControlRequest
	(*ModelControlResponse)(nil),                     // 6: nvidia.inferenceserver.ModelControlResponse
	(*SharedMemoryControlRequest)(nil),               // 7: nvidia.inferenceserver.SharedMemoryControlRequest
	(*SharedMemoryControlResponse)(nil),              // 8: nvidia.inferenceserver.SharedMemoryControlResponse
	(*InferRequest)(nil),                             // 9: nvidia.inferenceserver.InferRequest
	(*InferResponse)(nil),                            // 10: nvidia.inferenceserver.InferResponse
	(*RepositoryRequest)(nil),                        // 11: nvidia.inferenceserver.RepositoryRequest
	(*RepositoryResponse)(nil),                       // 12: nvidia.inferenceserver.RepositoryResponse
	(*SharedMemoryControlRequest_Register)(nil),      // 13: nvidia.inferenceserver.SharedMemoryControlRequest.Register
	(*SharedMemoryControlRequest_Unregister)(nil),    // 14: nvidia.inferenceserver.SharedMemoryControlRequest.Unregister
	(*SharedMemoryControlRequest_UnregisterAll)(nil), // 15: nvidia.inferenceserver.SharedMemoryControlRequest.UnregisterAll
	(*SharedMemoryControlRequest_Status)(nil),        // 16: nvidia.inferenceserver.SharedMemoryControlRequest.Status
	(*SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier)(nil), // 17: nvidia.inferenceserver.SharedMemoryControlRequest.Register.SystemSharedMemoryIdentifier
	(*SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier)(nil),   // 18: nvidia.inferenceserver.SharedMemoryControlRequest.Register.CUDASharedMemoryIdentifier
	(*SharedMemoryControlResponse_Status)(nil),                               // 19: nvidia.inferenceserver.SharedMemoryControlResponse.Status
	(*RequestStatus)(nil),        // 20: nvidia.inferenceserver.RequestStatus
	(*ServerStatus)(nil),         // 21: nvidia.inferenceserver.ServerStatus
	(*InferRequestHeader)(nil),   // 22: nvidia.inferenceserver.InferRequestHeader
	(*InferResponseHeader)(nil),  // 23: nvidia.inferenceserver.InferResponseHeader
	(*ModelRepositoryIndex)(nil), // 24: nvidia.inferenceserver.ModelRepositoryIndex
	(*SharedMemoryRegion)(nil),   // 25: nvidia.inferenceserver.SharedMemoryRegion
}
var file_grpc_service_proto_depIdxs = []int32{
	20, // 0: nvidia.inferenceserver.StatusResponse.request_status:type_name -> nvidia.inferenceserver.RequestStatus
	21, // 1: nvidia.inferenceserver.StatusResponse.server_status:type_name -> nvidia.inferenceserver.ServerStatus
	20, // 2: nvidia.inferenceserver.HealthResponse.request_status:type_name -> nvidia.inferenceserver.RequestStatus
	0,  // 3: nvidia.inferenceserver.ModelControlRequest.type:type_name -> nvidia.inferenceserver.ModelControlRequest.Type
	20, // 4: nvidia.inferenceserver.ModelControlResponse.request_status:type_name -> nvidia.inferenceserver.RequestStatus
	13, // 5: nvidia.inferenceserver.SharedMemoryControlRequest.register:type_name -> nvidia.inferenceserver.SharedMemoryControlRequest.Register
	14, // 6: nvidia.inferenceserver.SharedMemoryControlRequest.unregister:type_name -> nvidia.inferenceserver.SharedMemoryControlRequest.Unregister
	15, // 7: nvidia.inferenceserver.SharedMemoryControlRequest.unregister_all:type_name -> nvidia.inferenceserver.SharedMemoryControlRequest.UnregisterAll
	16, // 8: nvidia.inferenceserver.SharedMemoryControlRequest.status:type_name -> nvidia.inferenceserver.SharedMemoryControlRequest.Status
	20, // 9: nvidia.inferenceserver.SharedMemoryControlResponse.request_status:type_name -> nvidia.inferenceserver.RequestStatus
	19, // 10: nvidia.inferenceserver.SharedMemoryControlResponse.shared_memory_status:type_name -> nvidia.inferenceserver.SharedMemoryControlResponse.Status
	22, // 11: nvidia.inferenceserver.InferRequest.meta_data:type_name -> nvidia.inferenceserver.InferRequestHeader
	20, // 12: nvidia.inferenceserver.InferResponse.request_status:type_name -> nvidia.inferenceserver.RequestStatus
	23, // 13: nvidia.inferenceserver.InferResponse.meta_data:type_name -> nvidia.inferenceserver.InferResponseHeader
	20, // 14: nvidia.inferenceserver.RepositoryResponse.request_status:type_name -> nvidia.inferenceserver.RequestStatus
	24, // 15: nvidia.inferenceserver.RepositoryResponse.index:type_name -> nvidia.inferenceserver.ModelRepositoryIndex
	17, // 16: nvidia.inferenceserver.SharedMemoryControlRequest.Register.system_shared_memory:type_name -> nvidia.inferenceserver.SharedMemoryControlRequest.Register.SystemSharedMemoryIdentifier
	18, // 17: nvidia.inferenceserver.SharedMemoryControlRequest.Register.cuda_shared_memory:type_name -> nvidia.inferenceserver.SharedMemoryControlRequest.Register.CUDASharedMemoryIdentifier
	25, // 18: nvidia.inferenceserver.SharedMemoryControlResponse.Status.shared_memory_region:type_name -> nvidia.inferenceserver.SharedMemoryRegion
	1,  // 19: nvidia.inferenceserver.GRPCService.Status:input_type -> nvidia.inferenceserver.StatusRequest
	3,  // 20: nvidia.inferenceserver.GRPCService.Health:input_type -> nvidia.inferenceserver.HealthRequest
	9,  // 21: nvidia.inferenceserver.GRPCService.Infer:input_type -> nvidia.inferenceserver.InferRequest
	9,  // 22: nvidia.inferenceserver.GRPCService.StreamInfer:input_type -> nvidia.inferenceserver.InferRequest
	5,  // 23: nvidia.inferenceserver.GRPCService.ModelControl:input_type -> nvidia.inferenceserver.ModelControlRequest
	7,  // 24: nvidia.inferenceserver.GRPCService.SharedMemoryControl:input_type -> nvidia.inferenceserver.SharedMemoryControlRequest
	11, // 25: nvidia.inferenceserver.GRPCService.Repository:input_type -> nvidia.inferenceserver.RepositoryRequest
	2,  // 26: nvidia.inferenceserver.GRPCService.Status:output_type -> nvidia.inferenceserver.StatusResponse
	4,  // 27: nvidia.inferenceserver.GRPCService.Health:output_type -> nvidia.inferenceserver.HealthResponse
	10, // 28: nvidia.inferenceserver.GRPCService.Infer:output_type -> nvidia.inferenceserver.InferResponse
	10, // 29: nvidia.inferenceserver.GRPCService.StreamInfer:output_type -> nvidia.inferenceserver.InferResponse
	6,  // 30: nvidia.inferenceserver.GRPCService.ModelControl:output_type -> nvidia.inferenceserver.ModelControlResponse
	8,  // 31: nvidia.inferenceserver.GRPCService.SharedMemoryControl:output_type -> nvidia.inferenceserver.SharedMemoryControlResponse
	12, // 32: nvidia.inferenceserver.GRPCService.Repository:output_type -> nvidia.inferenceserver.RepositoryResponse
	26, // [26:33] is the sub-list for method output_type
	19, // [19:26] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_grpc_service_proto_init() }
func file_grpc_service_proto_init() {
	if File_grpc_service_proto != nil {
		return
	}
	file_api_proto_init()
	file_request_status_proto_init()
	file_server_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_grpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlRequest_Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlRequest_Unregister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlRequest_UnregisterAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlRequest_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlRequest_Register_SystemSharedMemoryIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlRequest_Register_CUDASharedMemoryIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedMemoryControlResponse_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SharedMemoryControlRequest_Register_)(nil),
		(*SharedMemoryControlRequest_Unregister_)(nil),
		(*SharedMemoryControlRequest_UnregisterAll_)(nil),
		(*SharedMemoryControlRequest_Status_)(nil),
	}
	file_grpc_service_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SharedMemoryControlResponse_SharedMemoryStatus)(nil),
	}
	file_grpc_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RepositoryRequest_Index)(nil),
	}
	file_grpc_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*RepositoryResponse_Index)(nil),
	}
	file_grpc_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SharedMemoryControlRequest_Register_SystemSharedMemory)(nil),
		(*SharedMemoryControlRequest_Register_CudaSharedMemory)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_service_proto_goTypes,
		DependencyIndexes: file_grpc_service_proto_depIdxs,
		EnumInfos:         file_grpc_service_proto_enumTypes,
		MessageInfos:      file_grpc_service_proto_msgTypes,
	}.Build()
	File_grpc_service_proto = out.File
	file_grpc_service_proto_rawDesc = nil
	file_grpc_service_proto_goTypes = nil
	file_grpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GRPCServiceClient is the client API for GRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCServiceClient interface {
	//@@  .. cpp:var:: rpc Status(StatusRequest) returns (StatusResponse)
	//@@
	//@@     Get status for entire inference server or for a specified model.
	//@@
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	//@@  .. cpp:var:: rpc Health(HealthRequest) returns (HealthResponse)
	//@@
	//@@     Check liveness and readiness of the inference server.
	//@@
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	//@@  .. cpp:var:: rpc Infer(InferRequest) returns (InferResponse)
	//@@
	//@@     Request inference using a specific model. [ To handle large input
	//@@     tensors likely need to set the maximum message size to that they
	//@@     can be transmitted in one pass.
	//@@
	Infer(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*InferResponse, error)
	//@@  .. cpp:var:: rpc StreamInfer(stream InferRequest) returns (stream
	//@@     InferResponse)
	//@@
	//@@     Request inferences using a specific model in a streaming manner.
	//@@     Individual inference requests sent through the same stream will be
	//@@     processed in order and be returned on completion
	//@@
	StreamInfer(ctx context.Context, opts ...grpc.CallOption) (GRPCService_StreamInferClient, error)
	//@@  .. cpp:var:: rpc ModelControl(ModelControlRequest) returns
	//@@     (ModelControlResponse)
	//@@
	//@@     Request to load / unload a specified model.
	//@@
	ModelControl(ctx context.Context, in *ModelControlRequest, opts ...grpc.CallOption) (*ModelControlResponse, error)
	//@@  .. cpp:var:: rpc SharedMemoryControl(SharedMemoryControlRequest) returns
	//@@     (SharedMemoryControlResponse)
	//@@
	//@@     Request to register / unregister a specified shared memory region.
	//@@
	SharedMemoryControl(ctx context.Context, in *SharedMemoryControlRequest, opts ...grpc.CallOption) (*SharedMemoryControlResponse, error)
	//@@  .. cpp:var:: rpc Status(RepositoryRequest) returns (RepositoryResponse)
	//@@
	//@@     Get status associated with the model repository.
	//@@
	Repository(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*RepositoryResponse, error)
}

type gRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCServiceClient(cc grpc.ClientConnInterface) GRPCServiceClient {
	return &gRPCServiceClient{cc}
}

func (c *gRPCServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServiceClient) Infer(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*InferResponse, error) {
	out := new(InferResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCService/Infer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServiceClient) StreamInfer(ctx context.Context, opts ...grpc.CallOption) (GRPCService_StreamInferClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCService_serviceDesc.Streams[0], "/nvidia.inferenceserver.GRPCService/StreamInfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCServiceStreamInferClient{stream}
	return x, nil
}

type GRPCService_StreamInferClient interface {
	Send(*InferRequest) error
	Recv() (*InferResponse, error)
	grpc.ClientStream
}

type gRPCServiceStreamInferClient struct {
	grpc.ClientStream
}

func (x *gRPCServiceStreamInferClient) Send(m *InferRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCServiceStreamInferClient) Recv() (*InferResponse, error) {
	m := new(InferResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCServiceClient) ModelControl(ctx context.Context, in *ModelControlRequest, opts ...grpc.CallOption) (*ModelControlResponse, error) {
	out := new(ModelControlResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCService/ModelControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServiceClient) SharedMemoryControl(ctx context.Context, in *SharedMemoryControlRequest, opts ...grpc.CallOption) (*SharedMemoryControlResponse, error) {
	out := new(SharedMemoryControlResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCService/SharedMemoryControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServiceClient) Repository(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*RepositoryResponse, error) {
	out := new(RepositoryResponse)
	err := c.cc.Invoke(ctx, "/nvidia.inferenceserver.GRPCService/Repository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCServiceServer is the server API for GRPCService service.
type GRPCServiceServer interface {
	//@@  .. cpp:var:: rpc Status(StatusRequest) returns (StatusResponse)
	//@@
	//@@     Get status for entire inference server or for a specified model.
	//@@
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	//@@  .. cpp:var:: rpc Health(HealthRequest) returns (HealthResponse)
	//@@
	//@@     Check liveness and readiness of the inference server.
	//@@
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	//@@  .. cpp:var:: rpc Infer(InferRequest) returns (InferResponse)
	//@@
	//@@     Request inference using a specific model. [ To handle large input
	//@@     tensors likely need to set the maximum message size to that they
	//@@     can be transmitted in one pass.
	//@@
	Infer(context.Context, *InferRequest) (*InferResponse, error)
	//@@  .. cpp:var:: rpc StreamInfer(stream InferRequest) returns (stream
	//@@     InferResponse)
	//@@
	//@@     Request inferences using a specific model in a streaming manner.
	//@@     Individual inference requests sent through the same stream will be
	//@@     processed in order and be returned on completion
	//@@
	StreamInfer(GRPCService_StreamInferServer) error
	//@@  .. cpp:var:: rpc ModelControl(ModelControlRequest) returns
	//@@     (ModelControlResponse)
	//@@
	//@@     Request to load / unload a specified model.
	//@@
	ModelControl(context.Context, *ModelControlRequest) (*ModelControlResponse, error)
	//@@  .. cpp:var:: rpc SharedMemoryControl(SharedMemoryControlRequest) returns
	//@@     (SharedMemoryControlResponse)
	//@@
	//@@     Request to register / unregister a specified shared memory region.
	//@@
	SharedMemoryControl(context.Context, *SharedMemoryControlRequest) (*SharedMemoryControlResponse, error)
	//@@  .. cpp:var:: rpc Status(RepositoryRequest) returns (RepositoryResponse)
	//@@
	//@@     Get status associated with the model repository.
	//@@
	Repository(context.Context, *RepositoryRequest) (*RepositoryResponse, error)
}

// UnimplementedGRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCServiceServer struct {
}

func (*UnimplementedGRPCServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedGRPCServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedGRPCServiceServer) Infer(context.Context, *InferRequest) (*InferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Infer not implemented")
}
func (*UnimplementedGRPCServiceServer) StreamInfer(GRPCService_StreamInferServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInfer not implemented")
}
func (*UnimplementedGRPCServiceServer) ModelControl(context.Context, *ModelControlRequest) (*ModelControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelControl not implemented")
}
func (*UnimplementedGRPCServiceServer) SharedMemoryControl(context.Context, *SharedMemoryControlRequest) (*SharedMemoryControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedMemoryControl not implemented")
}
func (*UnimplementedGRPCServiceServer) Repository(context.Context, *RepositoryRequest) (*RepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Repository not implemented")
}

func RegisterGRPCServiceServer(s *grpc.Server, srv GRPCServiceServer) {
	s.RegisterService(&_GRPCService_serviceDesc, srv)
}

func _GRPCService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCService_Infer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).Infer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCService/Infer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).Infer(ctx, req.(*InferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCService_StreamInfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCServiceServer).StreamInfer(&gRPCServiceStreamInferServer{stream})
}

type GRPCService_StreamInferServer interface {
	Send(*InferResponse) error
	Recv() (*InferRequest, error)
	grpc.ServerStream
}

type gRPCServiceStreamInferServer struct {
	grpc.ServerStream
}

func (x *gRPCServiceStreamInferServer) Send(m *InferResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCServiceStreamInferServer) Recv() (*InferRequest, error) {
	m := new(InferRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPCService_ModelControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).ModelControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCService/ModelControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).ModelControl(ctx, req.(*ModelControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCService_SharedMemoryControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedMemoryControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).SharedMemoryControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCService/SharedMemoryControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).SharedMemoryControl(ctx, req.(*SharedMemoryControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCService_Repository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).Repository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.inferenceserver.GRPCService/Repository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).Repository(ctx, req.(*RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nvidia.inferenceserver.GRPCService",
	HandlerType: (*GRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _GRPCService_Status_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _GRPCService_Health_Handler,
		},
		{
			MethodName: "Infer",
			Handler:    _GRPCService_Infer_Handler,
		},
		{
			MethodName: "ModelControl",
			Handler:    _GRPCService_ModelControl_Handler,
		},
		{
			MethodName: "SharedMemoryControl",
			Handler:    _GRPCService_SharedMemoryControl_Handler,
		},
		{
			MethodName: "Repository",
			Handler:    _GRPCService_Repository_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamInfer",
			Handler:       _GRPCService_StreamInfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_service.proto",
}
